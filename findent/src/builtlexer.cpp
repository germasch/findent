#line 2 "lexer.cpp"

#line 4 "lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 204
#define YY_END_OF_BUFFER 205
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[798] =
    {   0,
      205,  203,  204,  202,  204,  203,  204,  199,  203,  204,
      198,  203,  204,  203,  204,  200,  203,  204,  201,  202,
      204,   17,   18,  203,  204,  203,  204,  203,  204,  203,
      204,  203,  204,  203,  204,  203,  204,  203,  204,  203,
      204,  203,  204,  203,  204,  203,  204,  203,  204,  203,
      204,  203,  204,  203,  204,  203,  204,  203,  204,  203,
      204,  203,  204,  203,  204,   19,   20,  203,  204,    4,
      204,    5,  204,    2,    4,  204,    3,    4,  204,    8,
      204,    9,  204,    6,    8,  204,    7,    8,  204,   16,
      204,   15,  204,   10,   16,  204,   12,   16,  204,   11,

       16,  204,   13,   16,  204,    1,  204,  204,  204,  146,
      204,  204,  146,  204,  204,  204,  204,  204,  204,  204,
      204,  195,  204,  195,  204,  194,  204,  195,  204,  195,
      204,  180,  195,  204,  195,  204,  195,  204,  151,  204,
      150,  204,  151,  204,  155,  204,  154,  204,  155,  204,
      155,  204,   21,  204,   23,  204,   22,  204,  158,  204,
      157,  204,  156,  158,  204,  168,  204,  166,  204,  168,
      204,   10,  168,  204,  167,  168,  204,  159,  168,  204,
      168,  204,  168,  204,  168,  204,   11,  168,  204,  169,
      204,  172,  204,  171,  204,   10,  172,  204,  172,  204,

       11,  172,  204,  173,  204,   14,   16,  204,  196,  198,
       17,   18,   18,   17,   18,   38,   74,  110,   19,   20,
       20,   19,   20,   19,   20,  146,  134,  146,  134,  146,
      136,  146,  134,  138,  140,  141,  146,  180,  187,  149,
       21,  156,  164,  165,  159,  197,   39,   50,  102,   50,
       20,  134,  136,  146,  134,  138,  140,  146,  134,  136,
      134,  140,  135,  146,  138,  140,  141,  146,  136,  138,
      140,  146,  138,  140,  146,  134,  141,  146,  134,  136,
      141,  146,  134,  138,  141,  146,  133,  134,  146,  181,
      149,  149,  153,  152,  165,  105,   28,   47,   71,  106,

       87,   88,  108,   90,   98,   99,  136,  140,  134,  136,
      138,  140,  146,  134,  146,  134,  136,  146,  134,  138,
      146,  134,  136,  140,  134,  134,  136,  135,  136,  146,
      135,  138,  140,  146,  141,  146,  136,  141,  146,  138,
      141,  146,  140,  136,  146,  136,  138,  146,  146,  138,
      146,  136,  134,  136,  138,  141,  146,  133,  134,  136,
      146,  133,  134,  138,  140,  146,  144,  146,  188,  149,
      170,   26,   32,   55,   59,   70,  126,  117,  107,  118,
      100,  129,  121,  103,  111,  136,  140,  134,  136,  138,
      146,  135,  136,  138,  140,  146,  135,  146,  135,  136,

      146,  135,  138,  146,  136,  138,  141,  146,  133,  134,
      136,  138,  140,  146,  133,  134,  146,  133,  134,  136,
      146,  133,  134,  138,  146,  136,  144,  146,  138,  140,
      144,  146,  143,  146,  184,  183,  147,  149,  147,  162,
      163,  160,  161,  104,  113,   48,  115,   72,   75,   81,
      109,  122,  135,  136,  138,  146,  133,  134,  136,  138,
      146,  136,  138,  140,  144,  146,  144,  146,  136,  144,
      146,  138,  144,  146,  136,  143,  146,  138,  140,  143,
      146,  182,  190,  148,  148,  149,  147,  149,  147,  128,
       35,  123,  125,   42,  124,   56,   67,   68,   76,   77,

       80,   86,  119,  120,  101,  130,  134,  140,  146,  134,
      136,  140,  146,  140,  146,  136,  140,  146,  145,  146,
      137,  140,  146,  135,  140,  146,  135,  136,  140,  146,
      133,  134,  140,  146,  133,  134,  136,  140,  146,  140,
      144,  146,  136,  140,  144,  146,  140,  143,  146,  136,
      140,  143,  146,  143,  146,  136,  143,  146,  189,   34,
       36,   37,   43,   52,  114,   69,   73,  116,  127,  131,
      134,  139,  140,  146,  134,  136,  139,  140,  146,  134,
      139,  146,  134,  136,  139,  146,  139,  140,  146,  136,
      139,  140,  146,  139,  146,  136,  139,  146,  136,  145,

      146,  139,  140,  142,  145,  146,  137,  146,  137,  136,
      137,  146,  139,  140,  145,  146,  135,  139,  140,  146,
      135,  136,  139,  140,  146,  135,  139,  146,  139,  141,
      146,  136,  139,  141,  146,  135,  136,  139,  146,  134,
      139,  141,  146,  134,  136,  139,  141,  146,  133,  134,
      139,  140,  146,  133,  134,  136,  139,  140,  146,  133,
      134,  139,  146,  133,  134,  136,  139,  146,  139,  140,
      144,  146,  136,  139,  140,  144,  146,  139,  144,  146,
      136,  139,  144,  146,  139,  140,  143,  146,  136,  139,
      140,  143,  146,  139,  143,  146,  136,  139,  143,  146,

    16569,16570,  191,   25,   27,   30,   46,   49,   57,   61,
       64,   78,   85,   91,   96,  136,  139,  140,  145,  146,
      142,  145,  146,  136,  142,  145,  146,  139,  142,  145,
      146,  136,  137,  137,  145,  146,  136,  145,  146,  139,
      145,  146,16569,16570,16576,16577,  112,   31,   63,   79,
       79,   93,   94,   95,   97,  132,  136,  139,  145,  146,
      136,  139,  142,  145,  146,16576,16577,   29,   54,   58,
       89, 8377, 8378,   33,   40,   51,   53,   60,   62,   66,
      178,  179,   41,   44,   65,   92, 8385, 8384,   84,   45,
       82,   83,  174,  175,   24,  176,  177

    } ;

static const flex_int16_t yy_accept[1563] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    2,    4,    6,
        8,   11,   14,   16,   19,   22,   26,   28,   30,   32,
       34,   36,   38,   40,   42,   44,   46,   48,   50,   52,
       54,   56,   58,   60,   62,   64,   66,   70,   72,   74,
       77,   80,   82,   84,   87,   90,   92,   94,   97,  100,
      103,  106,  108,  109,  110,  112,  113,  115,  116,  117,

      118,  119,  120,  121,  122,  124,  126,  128,  130,  132,
      135,  137,  139,  141,  143,  145,  147,  149,  151,  153,
      155,  157,  159,  161,  163,  166,  168,  170,  172,  175,
      178,  181,  183,  185,  187,  190,  192,  194,  196,  199,
      201,  204,  206,  209,  210,  210,  211,  211,  211,  213,
      214,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  217,  217,  217,  217,  217,  217,  217,
      217,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  219,  219,  219,  219,  219,
      219,  219,  219,  221,  222,  224,  226,  226,  227,  227,

      229,  229,  229,  229,  230,  230,  230,  230,  231,  231,
      231,  231,  231,  231,  231,  233,  233,  233,  233,  233,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  239,  239,  239,  239,
      239,  239,  239,  240,  241,  241,  241,  241,  242,  243,
      244,  244,  245,  246,  246,  246,  246,  246,  246,  246,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  248,  248,  248,  248,
      248,  248,  248,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,

      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  250,  250,  250,  250,  251,  251,  252,  252,  252,
      252,  252,  252,  252,  252,  255,  255,  255,  255,  259,
      259,  259,  259,  261,  261,  261,  261,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  265,
      265,  265,  265,  265,  269,  269,  269,  269,  269,  269,
      269,  273,  273,  273,  273,  276,  276,  276,  276,  279,
      279,  279,  279,  279,  279,  279,  283,  283,  283,  287,
      287,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  291,

      291,  291,  291,  291,  291,  292,  293,  293,  294,  295,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  297,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  300,  300,  300,  300,  300,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  302,  303,  304,  305,  305,  305,  305,  305,  305,
      305,  305,  306,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  308,

      308,  308,  309,  309,  309,  314,  314,  316,  319,  319,
      322,  322,  322,  325,  326,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      331,  331,  331,  331,  335,  335,  335,  337,  337,  340,
      340,  340,  343,  343,  344,  346,  346,  349,  350,  350,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  353,
      353,  358,  358,  358,  358,  358,  362,  362,  362,  362,
      367,  367,  367,  367,  367,  367,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,

      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      370,  370,  371,  371,  371,  371,  371,  371,  372,  372,
      372,  372,  372,  372,  372,  373,  373,  373,  373,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  375,  375,
      375,  375,  375,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  377,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  379,  380,  380,  380,  380,
      381,  381,  381,  381,  381,  381,  381,  381,  382,  383,
      383,  384,  385,  386,  386,  386,  386,  386,  386,  386,

      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      388,  388,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  397,
      397,  399,  402,  402,  405,  405,  409,  409,  409,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  409,  409,  415,  415,  418,  422,
      422,  426,  426,  426,  426,  426,  426,  426,  429,  429,
      429,  429,  433,  433,  433,  433,  435,  435,  435,  435,

      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      436,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  439,  440,  441,  442,  443,  444,  444,  444,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  448,  449,
      449,  450,  450,  450,  450,  450,  450,  451,  451,  451,
      451,  451,  451,  452,  452,  452,  452,  452,  452,  452,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,

      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      467,  469,  472,  472,  475,  475,  475,  475,  475,  478,
      478,  478,  478,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  483,  483,  483,  483,  484,  484,

      484,  484,  484,  485,  487,  489,  490,  490,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  492,  492,  492,
      493,  494,  494,  494,  494,  494,  494,  495,  495,  495,
      496,  496,  496,  496,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  498,  499,  499,  499,  500,
      500,  501,  501,  502,  502,  502,  502,  502,  502,  503,
      503,  503,  504,  505,  505,  505,  505,  505,  505,  505,
      506,  506,  507,  507,  507,  507,  507,  507,  507,  507,
      510,  510,  510,  510,  510,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  516,  516,

      516,  516,  516,  519,  519,  519,  519,  519,  519,  519,
      521,  521,  521,  521,  521,  521,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  524,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      535,  535,  535,  535,  535,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      543,  543,  543,  543,  543,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  550,  550,  550,

      550,  550,  554,  554,  556,  556,  559,  559,  559,  559,
      559,  559,  559,  559,  559,  559,  559,  559,  559,  559,
      560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
      560,  561,  562,  563,  563,  564,  564,  564,  564,  564,
      564,  564,  565,  565,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  567,  568,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  570,  570,  570,  570,  570,
      570,  570,  571,  571,  575,  575,  580,  580,  583,  583,
      587,  587,  590,  590,  594,  594,  596,  596,  599,  599,
      602,  602,  602,  602,  607,  607,  607,  609,  609,  610,

      610,  610,  613,  613,  613,  617,  617,  617,  617,  621,
      621,  626,  626,  629,  629,  632,  632,  636,  636,  640,
      640,  644,  644,  649,  649,  654,  654,  660,  660,  664,
      664,  669,  669,  673,  673,  678,  678,  681,  681,  685,
      685,  689,  689,  694,  694,  697,  697,  701,  701,  701,
      701,  701,  701,  701,  701,  703,  703,  703,  704,  704,
      704,  704,  705,  705,  706,  706,  706,  707,  707,  707,
      707,  707,  707,  708,  709,  709,  709,  709,  710,  710,
      710,  711,  711,  711,  712,  712,  712,  713,  713,  713,
      713,  713,  714,  714,  715,  715,  715,  715,  716,  716,

      716,  716,  716,  721,  721,  724,  724,  728,  728,  728,
      732,  732,  734,  734,  735,  737,  740,  740,  743,  743,
      743,  743,  743,  745,  745,  745,  745,  745,  747,  747,
      748,  748,  749,  749,  749,  749,  749,  749,  749,  749,
      749,  749,  749,  749,  750,  750,  750,  751,  752,  752,
      752,  752,  752,  752,  753,  754,  755,  756,  757,  757,
      761,  761,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  768,  768,  768,  768,  769,  769,  769,  769,
      769,  769,  769,  769,  770,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  772,  772,  772,  772,  773,  773,

      774,  774,  774,  774,  774,  775,  775,  776,  776,  776,
      777,  778,  779,  780,  781,  781,  781,  781,  781,  781,
      782,  783,  783,  783,  783,  784,  785,  785,  786,  786,
      786,  786,  787,  787,  787,  787,  788,  788,  789,  789,
      789,  790,  790,  790,  790,  790,  790,  791,  792,  792,
      792,  792,  792,  793,  793,  794,  794,  795,  796,  797,
      798,  798
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,    1,   15,   16,    1,    1,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,    1,   20,
       21,   22,   23,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   33,
       49,    1,   50,   51,   52,    1,   53,   54,   55,   56,

       57,   58,   59,   60,   61,   33,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   33,    1,   77,    1,   77,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[78] =
    {   0,
        1,    1,    2,    1,    1,    1,    3,    4,    5,    6,
        3,    1,    1,    1,    7,    1,    8,    8,    9,    1,
       10,   11,    1,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    1,    1,
       12,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    1
    } ;

static const flex_int16_t yy_base[1820] =
    {   0,
        0,   77,  154,  231,  306, 4411,    0,   73,  380,  457,
       21,   23,   22,   24,   26,   99,   55,   56,  130,  178,
     4410, 4375, 4296,  532,   41,  261, 4291,  175, 4273,   51,
     4222, 4218, 4233, 4196,   45,  100,  588,    0, 4182, 4164,
      104,  179, 4161, 4152,  207,  210, 4152, 7996, 7996,  104,
     7996,   13, 4122, 7996, 7996,  104,  248,  276,  385,  241,
      257,  466,  239,  388,  251,  253,  259,  287,  252,  168,
      468,  647,  243,  387,  465,  469,  131, 7996, 7996, 7996,
     7996, 7996, 7996, 7996, 7996, 7996, 7996, 7996, 7996, 7996,
     7996, 7996, 7996, 4108, 7996,  131,  192,  723,   29,  206,

      431,  800,  542,  876, 7996,  147, 7996,  308,  351,  487,
      514, 4083, 7996, 7996, 4087, 7996, 7996,  210, 4068,    0,
     7996, 7996, 7996, 7996,   23, 7996, 7996,  297, 7996, 7996,
      432,   53,  710,  668, 7996, 7996, 7996, 7996, 7996,  210,
     7996, 7996, 7996, 7996,  404,   48, 4056,    0, 4065,    0,
      473,  309,  467,  512,  498,  495,  648,  391,  649,  655,
      661,  651,  810,  739,  816,  418,  780,  807,  486,  812,
     4054,  730,  866,  731,  386,  733,  653,  808,  820,  825,
      872,  838,  734,  735, 4030,  828,  736,  809,  737,  883,
      904,  903,  116, 4024, 7996,  548, 4025, 7996,  409,  104,

      559,  571,  561,  294,  567,  581,  666,  485,  976,  679,
      691,  695, 1053,  706, 4016,  781,  951,  777,  998, 3974,
      768, 1002,  827, 1130, 1042, 1025, 1151, 1157, 1019,  894,
      963,  906, 1089,  156, 1009, 1155, 3923, 1167,  983, 1050,
     1090,  225, 1168, 1019,  967, 3937,  196,    0,  503, 7996,
     1078,    0, 1099,   99, 1102, 1157, 1167, 1166,  561, 7996,
      991,  738, 1173, 1064, 1201, 1062,  875, 1178, 1144, 1191,
     1088, 1147, 1187,  874,  900, 1177, 1212,  990, 1221,  304,
     1071, 1216, 1264, 1225, 1223, 1219, 1229, 1244, 1243, 1236,
     1241, 1238, 1251, 1248, 1292, 1260,  814, 1289, 1290, 1310,

     1258, 1311, 1314, 1295, 1318, 1325, 1323, 1340, 1324, 1328,
     3925, 1329, 1333, 1339,  642, 1343, 7996, 1028,  835, 1388,
      489,  865, 1037,  940, 3918, 1393, 1396, 1409, 3908,  948,
     1413,  960, 3902, 1118,  757, 1422, 3889, 3879, 1425, 1040,
     1429, 1439, 1460, 1464, 1516, 1262, 1469, 1472,  698, 1361,
     1481, 1489, 1493, 3876, 1419, 1502, 3869, 1434, 1477, 1498,
     7996, 1538, 1540, 1549, 3864, 1546, 1558, 1566, 3852, 1554,
     1570, 1579, 3850, 3840, 1567, 7996, 1584, 1593, 3830, 1596,
      848, 1575, 1605, 1615, 1636, 1637, 1640, 1646, 1649, 1652,
     1666, 1670, 1674, 1683, 1698, 1049, 1653,  807, 7996, 1438,

     1247, 1703, 1711, 1714, 1015, 1738, 1184, 7996, 7996,    0,
     1504, 1593, 1637, 1717, 1750, 1592, 1593, 1651, 1670, 1710,
     1386, 3814, 1685, 1728, 1457, 1720, 1702, 1731, 1725, 1738,
     1744, 1750, 1312, 1622, 1754, 1762, 1756, 1758, 1763, 1777,
     1764, 1766, 1770, 1765, 1773, 1788, 1793, 1789, 1794, 1817,
     1795, 1797, 1799, 3789, 1786, 1822, 1821, 1823, 3768, 1827,
     1825, 1840, 1846, 1851, 1829, 1854, 1866, 1843, 1860, 1861,
     3766, 1864, 1881, 3727, 1862, 1880, 1871, 1879, 1890, 1888,
     1891, 3706, 1920, 1900, 1894, 1899, 1906, 1916, 1938, 1918,
     1956, 1939, 1965, 1967, 1980, 1943, 1984, 1952, 3703, 1588,

     1993, 3682, 1961, 1989, 7996, 1998, 3673, 7996, 2001, 3630,
     3590, 2010, 7996, 3585, 7996, 2012, 2006, 2016, 2020, 2025,
     2028, 2037, 2022, 2041, 2051, 2072, 2076, 2128, 2080, 2081,
     2093, 2084, 2102, 2089, 2106, 2110, 2115, 2150, 2111, 3577,
     2153, 2156, 2165, 3516, 2112, 2178, 3503, 2155, 7996, 2182,
     2191, 3480, 2046, 7996, 7996, 2187, 7996, 3468, 2204, 3449,
     2207, 2161, 2216, 2201, 2220, 2229, 2233, 3450, 7996, 2238,
     7996, 2241, 2242, 2251, 2247, 3428, 2256, 2259, 2268, 3403,
     2264, 2277, 2287, 2308, 2309, 1358, 2265, 2318, 2321, 2322,
     2330, 2338, 2339, 2342, 2348, 2352, 2351, 2360, 2363, 1920,

     1978, 2145, 2142, 1325, 2160, 2370, 2367, 2375, 2393, 7996,
     2397, 2211, 2259,  956, 1071, 1083, 1106, 7996, 2410, 2357,
     2374, 2379, 2285, 2399, 2363, 2331, 2375, 2410, 2407, 2428,
     2422, 2392, 2423, 2427, 2429, 1637, 2166, 2435, 2441, 2424,
     2437, 2443, 2445, 2452, 2018, 2451, 2462, 3378, 2448, 2456,
     2458, 2463, 3369, 2454, 2466, 2469, 2476, 2487, 2484, 2477,
     2485, 3355, 7996, 2502, 2491, 2499, 2496, 2511, 2510, 2515,
     2517, 2521, 2528, 2529, 7996, 3330, 2531, 2540, 2533, 7996,
     2513, 2543, 2544, 2530, 2546, 2549, 2547, 7996, 3317, 2550,
     7996, 3228, 2565, 2576, 2559, 2599, 2578, 2281, 2600, 2610,

     1541, 2623, 3243, 2627, 3235, 2619, 2634, 2638, 2642, 7996,
     2645, 7996, 2647, 2605, 2651, 2648, 2657, 2121, 2660, 3223,
     2664, 3179, 2668, 2671, 2674, 2677, 2680, 2694, 2697, 2681,
     2700, 2714, 2244, 2718, 3148, 2722, 2701, 2726, 2577, 2729,
     3147, 2733, 3135, 2737, 2740, 2744, 3088, 2747, 7996, 2750,
     3085, 7996, 2753, 3082, 2757, 7996, 2613, 3020, 2760, 3002,
     2764, 2767, 2771, 2774, 2703, 2702, 2778, 2781, 2783, 2785,
     2790, 2940, 2794, 2926, 2798, 7996, 2801, 2898, 7996, 2804,
     2889, 2809, 2830, 2831, 2834, 2843, 2839, 2874, 2848, 2850,
     2860, 2838, 2835, 2864, 2867, 1504, 2868, 2871, 2877, 2878,

     2886, 2887, 2890, 2896, 2899, 2908, 2907, 2911, 2277, 7996,
     7996, 2798, 2128, 2851, 2921, 2918, 2924, 2933, 2928, 2937,
     2954, 1404, 7996, 7996, 7996, 7996, 2921, 2931, 2770, 2933,
     2940, 2942, 2949, 2955, 2958, 2879, 2900, 7996, 2950, 2820,
     2960, 2969, 2970, 2959, 2791, 2968, 2977, 2971, 2987, 2690,
     2989, 2990, 2973, 2996, 2991, 2985, 2999, 3000, 3012, 3014,
     3001, 3017, 3022, 3016, 3018, 3036, 3029, 7996, 2674, 3040,
     2673, 3046, 3047, 3042, 3044, 3065, 3073, 3062, 3050, 3041,
     3067, 3076, 3095, 3097, 3082, 3101, 3080, 3070, 3107, 7996,
     3099, 3102, 3143, 3120, 3155, 3126, 3164, 3144, 3173, 3152,

     3161, 3177, 3186, 3182, 3190, 3191, 3200, 3196, 3205, 3208,
     3217, 3213, 3214, 3226, 3229, 3238, 3240, 3249, 3252, 3253,
     3257, 3266, 3269, 3278, 3263, 3274, 3283, 3286, 3295, 3291,
     3292, 3304, 3300, 3309, 3313, 3318, 3322, 7996, 3324, 3327,
     3328, 3337, 3341, 3350, 3353, 3347, 3362, 3358, 3367, 3370,
     3379, 3375, 3376, 3388, 3391, 3400, 7996, 3410, 3431, 3432,
     3396, 3441, 3397, 3445, 3447, 3461, 3464, 3465, 3474, 7996,
     2684, 7996, 3478, 2683, 3486, 3469, 3490, 3487, 2624, 3499,
     3501, 3510, 2628, 3495, 3513, 3514, 3522, 3523, 3526, 3532,
     3536, 3535, 3096, 7996, 3142, 3160, 3233, 3344, 3545, 3553,

     3546, 3550, 7996, 3130, 3210, 7996, 3316, 2588, 3491, 3534,
     3524, 3547, 3545, 3546, 3246, 3549, 2579, 3488, 3550, 7996,
     7996, 3220, 3221, 3503, 3390, 3556, 2578, 3559, 3573, 7996,
     3591, 3567, 3408, 2575, 3604, 3580, 3577, 3586, 3599, 3600,
     3611, 3605, 3420, 3588, 2514, 2464, 3613, 3602, 2381, 3621,
     2366, 3618, 2365, 3617, 3628, 3619, 3630, 3631, 2311, 3632,
     3626, 7996, 7996, 3646, 3640, 3657, 3647, 3649, 3656, 7996,
     3658, 1226, 3691, 3680, 3701, 3704, 3716, 3719, 3728, 2324,
     3706, 3732, 3718, 3737, 7996, 3741, 3750, 3746, 3759, 3755,
     3763, 3764, 3773, 3769, 3778, 3781, 3790, 2311, 3786, 3799,

     3787, 3803, 7996, 3808, 3812, 3817, 3821, 3826, 3829, 1969,
     3837, 3834, 3846, 3849, 3858, 3861, 3835, 3870, 3873, 3843,
     3882, 3855, 3886, 3888, 3897, 2310, 3867, 3901, 3905, 3906,
     3915, 3919, 3923, 3928, 3924, 3933, 7996, 3937, 3946, 3950,
     3955, 3959, 3964, 3968, 3970, 3973, 3982, 3978, 3987, 3991,
     3996, 4000, 4004, 4005, 4014, 4010, 4019, 4022, 4031, 2260,
     4027, 4040, 4028, 4044, 7996, 4049, 4053, 4058, 4062, 4067,
     4077, 4098, 4099, 4102, 4111, 4107, 4120, 4115, 4129, 2220,
     4132, 4141, 4137, 4146, 7996, 4155, 4158, 4167, 4170, 4173,
     4176, 4185, 4181, 4190, 4193, 4202, 2194, 4198, 4211, 4199,

     4215, 7996, 4220, 2171, 4224, 7996, 4228, 4232, 4236, 4240,
     4248, 4244, 4252, 3727, 3305, 3728, 4257, 4261, 4262, 7996,
     4265, 4266, 4075, 4256, 4260, 3958, 4233, 4254, 4191, 4273,
     7996, 2143, 2118, 3826, 7996, 4262, 3878, 4276, 4118, 4293,
     4264, 4279, 4297, 7996, 4292, 4309, 4305, 4310, 4313, 4320,
     4311, 4324, 4317, 2108, 2104, 7996, 4328, 4323, 4100, 3673,
     4327, 4329, 4330, 4334, 7996, 4178, 4339, 4326, 4353, 4340,
     4347, 7996, 4396, 2088, 4405, 7996, 4414, 2071, 4418, 7996,
     4427, 2029, 4423, 7996, 4436, 2019, 4432, 7996, 4361, 2000,
     4441, 4387, 4445, 1975, 4384, 4454, 4457, 4458, 4466, 4462,

     4463, 1962, 4472, 4476, 1919, 4480, 4489, 4493, 1862, 4498,
     7996, 4502, 1845, 4511, 1797, 4507, 7996, 4516, 7996, 4520,
     1731, 4525, 7996, 4529, 1727, 4534, 7996, 4538, 1715, 4543,
     7996, 4547, 1694, 4552, 7996, 4556, 1685, 4561, 7996, 4565,
     1682, 4570, 7996, 4574, 1673, 4579, 7996, 4582, 4583, 4591,
     4592, 4595, 4604, 3441, 4606, 3624, 4609, 7996, 4614, 4615,
     4584, 1644, 4608, 1594, 4360, 4604, 1586, 4580, 3971, 4603,
     4606, 4611, 1583, 1560, 4609, 4610, 4623, 1539, 4613, 4629,
     1536, 4627, 4620, 1528, 4631, 4635, 4669, 4639, 4655, 4642,
     4638, 1494, 4650, 1459, 4670, 4671, 4672, 1368, 4673, 4674,

     4692, 4712, 7996, 4716, 1379, 4694, 7996, 4721, 4732, 1378,
     4718, 1313, 1277, 1261, 1248, 7996, 4736, 1244, 4744, 4745,
     4748, 3647, 4755, 1185, 1163, 4150, 4758, 4761, 4713, 7996,
     4725, 1157, 4747, 4243, 4733, 4750, 4745, 4752, 4754, 4757,
     4762, 4774, 4768, 1146, 4759, 4769, 7996, 1092, 4760, 4786,
     4783, 4772, 4793, 1066,  966,  907,  897,  886, 4836, 7996,
     4848, 7996, 4814, 4850, 4851, 4233,  858, 4863,  767, 4868,
     4328, 4871,    0,    0, 4788,  767, 4825, 4346, 4838, 4855,
     4843, 4860, 4823,  758,  749, 4861, 4865, 4867, 4873, 4859,
     4807, 4875, 4878,  669, 4895,  561, 4900, 7996, 4923, 7996,

      549,  554,  500, 4880,  484, 4858,  408, 4888, 4909,  338,
      327,  308,  269,  242, 4911, 4895, 4892, 4889, 4912, 4877,
     4895, 4950, 4955, 4936, 7996,  204, 4929,  189, 4952, 4931,
     4954,  165,  131,  128, 4972, 7996, 4977, 7996, 4958, 4964,
      113, 4965, 4966, 4952, 4953, 4973,  105,   50, 4968, 4968,
     4969, 4985,   42, 4978, 7996, 4979, 7996,   18, 7996, 7996,
     7996, 5042, 5054, 5066, 5078, 5090, 5102, 5114, 5126, 5138,
     5150, 5162, 5174, 5186, 5198, 5210, 5222, 5234, 5246, 5251,
     5257, 5263, 5272, 5284, 5296, 5308, 5320, 5332, 5344, 5356,
     5366, 5374, 5383, 5388, 5393, 5398, 5406, 5418, 5430, 5442,

     5454, 5466, 5478, 5490, 5502, 5514, 5526, 5538, 5550, 5562,
     5574, 5586, 5598, 5610, 5622, 5634, 5646, 5656, 5657, 5666,
     5678, 5690, 5702, 5714, 5726, 5738, 5750, 5762, 5774, 5786,
     5798, 5810, 5822, 5834, 5846, 5858, 5870, 5882, 5894, 5906,
     5918, 5930, 5942, 5954, 5966, 5978, 5988, 5991, 6000, 6012,
     6024, 6036, 6048, 6060, 6072, 6084, 6096, 6108, 6120, 6132,
     6144, 6156, 6168, 6180, 6192, 6204, 6216, 6228, 6240, 6252,
     6264, 6276, 6288, 6300, 6312, 6324, 6336, 6348, 6353, 6362,
     6374, 6386, 6398, 6410, 6422, 6434, 6446, 6458, 6470, 6482,
     6494, 6506, 6518, 6530, 6542, 6554, 6566, 6578, 6590, 6602,

     6614, 6626, 6638, 6650, 6662, 6674, 6686, 6698, 6710, 6722,
     6734, 6738, 6747, 6759, 6771, 6783, 6795, 6807, 6819, 6831,
     6843, 6855, 6867, 6879, 6891, 6903, 6915, 6927, 6939, 6951,
     6963, 6975, 6987, 6999, 7011, 7023, 7035, 7047, 7059, 7071,
     7083, 7095, 7107, 7119, 7131, 7143, 7148, 7157, 7169, 7181,
     7193, 7205, 7217, 7229, 7241, 7253, 7265, 7277, 7289, 7301,
     7313, 7325, 7337, 7349, 7361, 7373, 7385, 7397, 7409, 7421,
     7433, 7445, 7457, 7469, 7481, 7493, 7505, 7517, 7529, 7541,
     7553, 7565, 7577, 7589, 7594, 7603, 7615, 7627, 7639, 7651,
     7663, 7675, 7687, 7699, 7711, 7723, 7735, 7747, 7759, 7771,

     7783, 7795, 7807, 7819, 7831, 7843, 7855, 7867, 7879, 7891,
     7903, 7915, 7927, 7932, 7938, 7947, 7959, 7971, 7983
    } ;

static const flex_int16_t yy_def[1820] =
    {   0,
     1562, 1562, 1563, 1563,    2,    5,    5,    5, 1564, 1564,
     1565, 1565, 1566, 1566, 1567, 1567, 1567, 1567, 1567, 1567,
     1568, 1568, 1569, 1570, 1571, 1571, 1572, 1572, 1573, 1573,
     1574, 1574, 1575, 1575, 1576, 1576, 1561,   37, 1577, 1577,
     1578, 1578, 1579, 1579, 1567, 1567, 1561, 1561, 1561, 1561,
     1561, 1561, 1580, 1561, 1561, 1581, 1580, 1580, 1580, 1580,
     1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580,
     1580, 1580, 1580, 1580, 1580, 1580, 1582, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1583, 1561, 1584, 1585, 1586, 1587, 1588,

     1589, 1586, 1584, 1588, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1590,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1591, 1591, 1591, 1591, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1580, 1592, 1593, 1594,
     1581, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580,
     1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580,
     1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580,
     1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580,
     1580, 1580, 1595, 1596, 1561, 1582, 1583, 1561, 1597, 1598,

     1599, 1600, 1585, 1598, 1601, 1602, 1603, 1598, 1604, 1605,
     1606, 1607, 1604, 1605, 1608, 1609, 1610, 1611, 1611, 1612,
     1613, 1611, 1614, 1615, 1603, 1603, 1603, 1603, 1603, 1603,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1616, 1561, 1561,
     1561, 1617, 1618, 1618, 1618, 1618, 1618, 1618, 1561, 1561,
     1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619,
     1619, 1619, 1619, 1619, 1619, 1561, 1619, 1619, 1619, 1619,
     1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619,
     1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619,

     1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619,
     1619, 1619, 1619, 1619,  283, 1619, 1561, 1620, 1621, 1622,
     1598, 1623, 1612, 1621, 1608, 1624, 1622, 1622, 1612, 1624,
     1622, 1625, 1608, 1626, 1627, 1627, 1612, 1626, 1628, 1629,
     1630, 1631, 1632, 1633, 1631, 1629, 1634, 1632, 1598, 1635,
     1636, 1633, 1633, 1612, 1637, 1633, 1608, 1561, 1634, 1634,
     1561, 1634, 1630, 1630, 1612, 1634, 1630, 1638, 1612, 1639,
     1638, 1638, 1612, 1640, 1639, 1561, 1639, 1638, 1612, 1641,
     1598, 1642, 1643, 1644, 1645, 1628, 1628, 1628, 1628, 1628,
     1628, 1628, 1628, 1628, 1628, 1561, 1561, 1561, 1561, 1561,

     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1646,
     1647, 1647, 1647, 1647, 1561, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1561, 1561, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1649, 1650,
     1651, 1650, 1652, 1651, 1651, 1652, 1651, 1653, 1608, 1640,

     1612, 1612, 1652, 1652, 1561, 1652, 1612, 1561, 1651, 1612,
     1654, 1654, 1561, 1612, 1561, 1655, 1656, 1657, 1656, 1658,
     1657, 1657, 1658, 1657, 1659, 1660, 1661, 1659, 1660, 1662,
     1663, 1661, 1661, 1664, 1661, 1658, 1658, 1658, 1662, 1608,
     1665, 1663, 1663, 1612, 1665, 1663, 1612, 1664, 1561, 1664,
     1661, 1612, 1561, 1561, 1561, 1658, 1561, 1612, 1657, 1612,
     1666, 1667, 1666, 1667, 1667, 1666, 1666, 1640, 1561, 1667,
     1561, 1668, 1669, 1670, 1669, 1608, 1671, 1670, 1670, 1612,
     1671, 1670, 1672, 1673, 1673, 1674, 1675, 1676, 1677, 1677,
     1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1561,

     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1679,
     1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679,
     1679, 1679, 1679, 1679, 1679, 1561, 1561, 1679, 1679, 1679,
     1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679,
     1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679,
     1679, 1679, 1561, 1679, 1679, 1679, 1679, 1679, 1679, 1679,
     1679, 1679, 1679, 1679, 1561, 1679, 1679, 1679, 1679, 1561,
     1679, 1679, 1679, 1679, 1679, 1679, 1679, 1561, 1679, 1679,
     1561, 1679, 1679, 1679, 1679, 1680, 1681, 1682, 1681, 1683,

     1682, 1682, 1683, 1682, 1683, 1683, 1683, 1682, 1640, 1561,
     1683, 1561, 1684, 1685, 1686, 1685, 1687, 1686, 1686, 1687,
     1686, 1687, 1687, 1687, 1686, 1684, 1688, 1689, 1684, 1688,
     1690, 1691, 1689, 1689, 1692, 1689, 1690, 1693, 1691, 1691,
     1693, 1691, 1692, 1692, 1689, 1687, 1693, 1693, 1561, 1693,
     1694, 1561, 1691, 1694, 1692, 1561, 1695, 1696, 1695, 1696,
     1696, 1695, 1696, 1695, 1697, 1698, 1699, 1698, 1700, 1699,
     1699, 1700, 1699, 1700, 1700, 1561, 1700, 1694, 1561, 1699,
     1694, 1701, 1702, 1702, 1703, 1704, 1703, 1705, 1706, 1704,
     1704, 1694, 1706, 1704, 1707, 1708, 1709, 1710, 1684, 1707,

     1707, 1684, 1684, 1684, 1684, 1684, 1684, 1707, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1711, 1561, 1561, 1561, 1561, 1561, 1712, 1712, 1712, 1712,
     1712, 1712, 1712, 1712, 1712, 1712, 1712, 1561, 1712, 1712,
     1712, 1712, 1712, 1561, 1561, 1712, 1712, 1712, 1712, 1712,
     1712, 1712, 1712, 1712, 1712, 1712, 1712, 1712, 1712, 1712,
     1712, 1712, 1712, 1712, 1712, 1712, 1712, 1561, 1712, 1712,
     1712, 1712, 1712, 1712, 1712, 1712, 1712, 1712, 1712, 1712,
     1712, 1712, 1712, 1712, 1712, 1712, 1712, 1712, 1712, 1561,
     1712, 1712, 1713, 1714, 1715, 1714, 1716, 1715, 1715, 1716,

     1716, 1716, 1715, 1716, 1717, 1718, 1719, 1718, 1720, 1719,
     1719, 1720, 1720, 1720, 1719, 1720, 1721, 1722, 1721, 1723,
     1724, 1725, 1726, 1726, 1727, 1724, 1728, 1725, 1725, 1728,
     1727, 1726, 1728, 1728, 1725, 1727, 1728, 1561, 1729, 1730,
     1730, 1729, 1730, 1729, 1731, 1732, 1733, 1732, 1734, 1733,
     1733, 1734, 1734, 1734, 1733, 1734, 1561, 1735, 1736, 1736,
     1737, 1738, 1737, 1739, 1738, 1738, 1739, 1739, 1739, 1561,
     1740, 1561, 1738, 1740, 1741, 1742, 1743, 1742, 1744, 1745,
     1743, 1743, 1740, 1745, 1746, 1746, 1741, 1746, 1746, 1746,
     1746, 1746, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,

     1561, 1561, 1561, 1561, 1561, 1561, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1561,
     1561, 1561, 1561, 1747, 1747, 1747, 1747, 1747, 1747, 1561,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1561, 1561, 1747, 1747, 1747, 1747, 1747, 1747, 1561,
     1747, 1747, 1748, 1749, 1750, 1749, 1751, 1750, 1750, 1740,
     1751, 1750, 1751, 1751, 1561, 1751, 1750, 1751, 1750, 1751,
     1746, 1752, 1753, 1752, 1754, 1753, 1753, 1740, 1754, 1753,

     1754, 1754, 1561, 1754, 1753, 1754, 1753, 1754, 1755, 1756,
     1755, 1757, 1758, 1759, 1759, 1760, 1761, 1762, 1763, 1764,
     1765, 1764, 1766, 1765, 1765, 1740, 1766, 1765, 1767, 1768,
     1767, 1767, 1768, 1768, 1766, 1766, 1561, 1766, 1765, 1767,
     1766, 1765, 1768, 1766, 1769, 1770, 1769, 1770, 1770, 1769,
     1770, 1769, 1771, 1772, 1773, 1772, 1774, 1773, 1773, 1740,
     1774, 1773, 1774, 1774, 1561, 1774, 1773, 1774, 1773, 1774,
     1775, 1776, 1776, 1777, 1778, 1777, 1779, 1778, 1778, 1740,
     1779, 1778, 1779, 1779, 1561, 1779, 1778, 1779, 1778, 1780,
     1781, 1782, 1781, 1783, 1782, 1782, 1740, 1783, 1782, 1783,

     1783, 1561, 1783, 1740, 1782, 1561, 1784, 1784, 1780, 1784,
     1784, 1784, 1784, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785,
     1561, 1785, 1785, 1561, 1561, 1785, 1785, 1785, 1785, 1785,
     1785, 1785, 1785, 1561, 1785, 1785, 1785, 1785, 1785, 1785,
     1785, 1785, 1785, 1785, 1785, 1561, 1785, 1785, 1785, 1785,
     1785, 1785, 1785, 1785, 1561, 1785, 1785, 1785, 1785, 1785,
     1785, 1561, 1786, 1740, 1787, 1561, 1786, 1740, 1787, 1561,
     1788, 1740, 1789, 1561, 1788, 1740, 1789, 1561, 1790, 1791,
     1792, 1793, 1793, 1740, 1794, 1793, 1795, 1795, 1795, 1796,

     1797, 1798, 1799, 1799, 1740, 1792, 1799, 1800, 1740, 1801,
     1561, 1800, 1740, 1802, 1740, 1803, 1561, 1801, 1561, 1804,
     1740, 1805, 1561, 1806, 1740, 1807, 1561, 1806, 1740, 1807,
     1561, 1808, 1740, 1809, 1561, 1808, 1740, 1809, 1561, 1810,
     1740, 1811, 1561, 1810, 1740, 1811, 1561, 1812, 1812, 1813,
     1812, 1813, 1813, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1814, 1814, 1814, 1814, 1814, 1814, 1814, 1814, 1561, 1814,
     1814, 1814, 1814, 1814, 1814, 1814, 1814, 1814, 1814, 1814,
     1814, 1814, 1814, 1814, 1814, 1814, 1815, 1814, 1814, 1814,
     1814, 1814, 1814, 1814, 1814, 1814, 1814, 1814, 1814, 1814,

     1792, 1792, 1561, 1792, 1740, 1794, 1561, 1794, 1793, 1740,
     1796, 1798, 1798, 1798, 1740, 1561, 1799, 1740, 1812, 1812,
     1812, 1561, 1561, 1816, 1817, 1561, 1561, 1561, 1814, 1561,
     1814, 1814, 1814, 1561, 1814, 1814, 1814, 1814, 1814, 1814,
     1814, 1814, 1814, 1814, 1814, 1814, 1561, 1814, 1814, 1814,
     1814, 1814, 1814, 1814, 1814, 1814, 1814, 1814, 1792, 1561,
     1794, 1561, 1813, 1812, 1813, 1561, 1816, 1816, 1817, 1817,
     1561, 1561, 1818, 1819, 1814, 1814, 1814, 1561, 1814, 1814,
     1814, 1814, 1814, 1814, 1814, 1814, 1814, 1814, 1814, 1814,
     1814, 1814, 1814, 1814, 1813, 1561, 1816, 1561, 1817, 1561,

     1561, 1818, 1819, 1814, 1814, 1561, 1814, 1814, 1814, 1814,
     1814, 1814, 1814, 1814, 1814, 1814, 1814, 1814, 1814, 1561,
     1561, 1818, 1819, 1814, 1561, 1814, 1814, 1814, 1814, 1814,
     1814, 1814, 1561, 1561, 1818, 1561, 1819, 1561, 1814, 1814,
     1814, 1814, 1814, 1561, 1561, 1814, 1814, 1814, 1814, 1561,
     1561, 1814, 1814, 1561, 1561, 1561, 1561, 1814, 1561, 1561,
        0, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,

     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,

     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,

     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561
    } ;

static const flex_int16_t yy_nxt[8074] =
    {   0,
       48,   48,   49,   50,   48,   48,   48,   48,   48,   48,
       48,   51,   48,   48,   48,   48,   52,   52,   48,   48,
       48,   48,   48,   79,   83,   79,   83,   75,   87,  146,
      146,  215,   80,   81,   80,   81,  148,   88,  216,  249,
      249,   76,  106,  107,  106,  108,   89,  124,   54,   48,
       48,   48,  118,  117,  118,  119,   75,   87,   87,  252,
      148,  125,  125,  252,  146,  146,   88,   88,  148,   76,
       84,   85,   84,   85,   90,   55,   48,   48,   48,   55,
       50,   48,   48,   48,   48,   48,   48,   48,   51,   48,
       48,   48,   48,   52,   52,   48,   48,   48,   48,   48,

       75,   87,  124,   90,   90,  252,  138,  144,  322,  252,
       88,  149,  150,  323,   76,  139,  125,  125,  140,   89,
      145,  145,  148,  148,  194,   54,   48,   48,   48,   75,
      195,  148,   87,  200,   91,  201,   91,   91,  193,  194,
      202,   88,   76, 1545,   91,  195, 1544,   90,  231,  148,
      231,  232,  141,   48,   48,   48,   49,   50,   48,   48,
       48,   48,   48,   48,   48,   51,   48,   48,   48,   48,
       52,   52,   48,   48,   48,   48,   48,  114,   90,  115,
       87,  138,   91,  148,   91,   91,  148,  396,  115,   88,
      139,  180,   91,  140,  204,  181,  205,  408,  409,  408,

      115,  206,   54,   48,   48,   48,   91,  148,  208,   87,
      210,  245,   87,  245,  246,  217,  396,  259,   88,  259,
      180,   88,  148,  259,  181,  143,   90,  141,  143,  115,
       48,   48,   48,   55,   50,   48,   48,   48,   48,   48,
       48,   48,   51,   48,   48,   48,   48,   52,   52,   48,
       48,   48,   48,   48,   91,   90,  401,  148,   90,  148,
      148,  148,  109,  107,  109,  108,  148,  110,  162,  148,
      148,  148,  152,  153,  111,  148,  170,  148,  163,   54,
       48,   48,   48,  112,  187,  401,  111,  148,  174,  154,
      175,  164,  178,  165,  148,  179,  176,  162,  322,  155,

      250,  152,  153,  323,  170,  148,  163,   48,   49,  233,
      156,  233,  187,  251,  251,  111,  174,  154,  175,  164,
      178,  165,  148,  179,  176,  177,  148,  148,  155,   57,
       58,   59,   60,   61,   62,   63,  234,   64,  156,  438,
       65,   66,   67,   68,   69,  148,   70,   71,   72,   73,
      261,   74,  235,  177,  235,  232,  148,  236,   57,   58,
       59,   60,   61,   62,   63,  234,   64,  438,   65,   66,
       67,   68,   69,  237,   70,   71,   72,   73,  261,   74,
       48,   48,   49,   50,   48,   48,   48,   48,   48,   48,
       48,   51,   48,   48,   48,   48,   52,   52,   48,   48,

       48,   48,   48,  148,  148,  148,  148,  144,  157,  148,
      188,  200,  296,  319,  268,  158,  171,  189,  320,  159,
      145,  145,  160,  172,  173,  161,  148,  190,   54,   48,
       48,   48,  219,  220,  219,  221,  148,  157,  252,  188,
      222,  296,  252,  268,  158,  171,  189,  159,  253,  253,
      160,  172,  173,  161,  286,  190,   48,   48,   48,   55,
       50,   48,   48,   48,   48,   48,   48,   48,   51,   48,
       48,   48,   48,   52,   52,   48,   48,   48,   48,   48,
      149,  150,  286,  148,  148,  148,  148,  148,  238,  322,
      238,  148,  262,  322,  323,  182,  192,  166,  323,  164,

      167,  191,  148,  168,  148,   54,   48,   48,   48,  169,
     1523,  183,  183,  148,  239,  241,  148,  241,  240,  249,
      249,  262,  289,  264,  182,  192,  166,  164,  167,  191,
      148,  168,  265,   48,   97,   98,   99,  169,  100,  183,
      183,  101,  242,  239,  200,  100,  201,  240,  102,  102,
      289,  202,  264,  263,  103,  193,  194,  104,  100, 1522,
      265,  325,  195,  204,  223,  205,  148, 1521,  326,  333,
      206,  242,  328,  329,  328,  330,  334,  415,  415, 1520,
      331,  263,  336,  337,  336,  338,  104,  100,  126,  126,
      127,  128,  126,  126,  126,  126,  126,  126,  126,  129,

      126,  126,  130,  126,  131,  131,  126,  126,  126,  126,
      126,  132,  132,  132,  132,  133,  134,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  135,  126,  126,  132,
      132,  132,  132,  132,  133,  134,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  126,  148,  148,  148,  208,  148,
      340,  148,  269,  148,  252,  341,  274,  184,  252,  148,
      298,  215,  266,  487,  185,  275,  270,  148,  347,  267,
      271,  272,  273,  349,  186,  350,  353,  354,  353,  355,

      351,  269,  322,  258,  356,  274,  184,  323,  215,  298,
      266,  487,  185,  275,  270,  347,  252,  267,  271,  272,
      252,  273,  186,  207,  207,  208,  209,  210,  207,  207,
      207,  258,  212,  207,  207,  207,  207,  207,  207,  213,
      213,  207,  207,  207,  207,  207,  255,  256,  148,  148,
      257,  148,  148,  148,  148,  148,  148,  148,  308,  514,
      295,  338,  309,  311,  313,  417,  280,  148,  291,  297,
      376,  207,  207,  207,  255,  256,  148,  377,  257,  369,
      281,  370,  360,  361,  360,  148,  371,  308, 1470,  295,
      362,  309,  311,  313,  417,  280,  291,  297,  148,  207,

      207,  207,  208,  213,  210,  207,  207,  207,  281,  217,
      207,  207,  207,  207,  207,  207,  213,  213,  207,  207,
      207,  207,  207,  287,  276,  148,  148,  148,  148,  381,
      148,  382,  148,  603,  148,  277,  383,  325,  148,  299,
      312,  282,  283,  148,  493,  300,  148,  288,  207,  207,
      207,  287,  322,  278,  290,  279,  148,  323,  284,  285,
      301,  302,  603, 1468,  277,  466,  310,  499,  299,  312,
      282,  283,  307,  300,  500,  288,  207,  224,  208,  224,
      210,  278,  290,  279,  148,  217,  284,  285,  301,  302,
      148,  292,  148,  148,  310,  303,  208,  304,  340,  225,

      307,  148,  423,  341,  148,  293,  226,  233,  294,  233,
      227,  431,  305,  228,  314,  148,  229,  306,  148,  395,
      292,  148,  148,  230,  303,  148,  304,  432,  225,  282,
      315,  423,  316,  293,  234,  226,  294,  307,  227,  431,
      305,  228,  325,  314,  229,  306,  284,  285,  395,  493,
      508,  230,  364,  365,  364,  366,  432,  506,  282,  315,
      367,  316,  333,  234,  231,  307,  231,  232,  245,  334,
      245,  246,  823,  823,  284,  285,  339,  339,  208,  342,
      340,  339,  339,  339,  148,  344,  339,  339,  339,  339,
      339,  339,  345,  345,  339,  339,  339,  339,  339,  372,

      220,  372,  370,  378,  379,  378,  370,  371,  148,  148,
      235,  371,  235,  232,  436,  236,  405,  397,  405,  398,
      405,  208,  406,  340,  339,  339,  339,  208,  341,  340,
      200,  237,  490,  416,  341,  407,  407,  491,  501,  502,
      501,  374,  215,  436,  208,  397,  340,  398,  388,  520,
      394,  341,  339,  339,  339,  208,  345,  340,  339,  339,
      339,  416,  341,  339,  339,  339,  339,  339,  339,  345,
      345,  339,  339,  339,  339,  339,  386,  388,  399,  394,
      148,  250,  148,  387,  148,  600,  400,  824,  824,  148,
      233,  241,  233,  241,  251,  251,  422,  420,  439,  825,

      825,  339,  339,  339,  386,  252,  148,  399,  252,  252,
      148,  387,  252,  600,  400,  253,  253,  234,  242,  512,
      513,  512,  826,  826,  422,  420,  428,  439,  411,  339,
      339,  384,  208,  384,  340,  339,  339,  339,  339,  341,
      339,  339,  339,  339,  339,  339,  234,  242,  339,  339,
      339,  339,  339,  208,  428,  340,  238,  411,  238,  208,
      341,  340,  148,  252,  148,  148,  341,  252,  238,  402,
      238,  402,  252,  252,  389,  148,  252,  252,  339,  339,
      339,  339,  239,  391, 1470,  426,  240,  613,  390,  429,
     1468,  148,  392,  393,  239,  403,  148,  412,  240,  404,

      613,  613,  433,  389,  418,  148,  339,  413,  414,  148,
      419,  239,  391,  426,  424,  240,  390,  429,  425,  148,
      392,  393,  434,  239,  403,  412,  421,  240,  404,  430,
      148,  433,  427,  418,  148,  413,  414,  148,  419,  148,
     1272,  148,  424,  148,  148,  455,  425,  148,  374,  435,
      434,  437,  374,  440,  148,  421,  148,  430,  454,  148,
      427,  148,  148, 1414,  215,  453,  148,  457,  458,  148,
      456,  520,  461,  459,  455,  463,  148,  435,  148, 1414,
      437,  440,  148,  605,  460,  471,  454,  441,  442,  443,
      444,  445,  446,  453,  462,  447,  457,  458,  456,  448,

      461,  459,  449,  465,  463,  450,  451,  148,  148,  452,
      148,  605,  460,  148,  471, 1414,  441,  442,  443,  444,
      445,  446,  462,  464,  447,  467,  468,  448,  148,  148,
      449,  465,  148,  450,  451,  469,  148,  452,  475,  470,
      473,  148,  148,  148,  472,  476,  148,  148,  474,  636,
      479,  148,  464,  467,  468,  483,  477,  148,  148,  813,
      482,  148,  322,  540,  469,  478,  475,  323,  470,  473,
      541,  484,  472,  485,  476,  480,  474,  636,  488,  479,
      481,  486,  374,  374,  483,  477,  148,  813,  482,  495,
      329,  495,  496,  478,  504,  505,  504,  497,  507,  484,

      496,  485,  506,  480,  148,  497,  488, 1006,  481,  486,
      495,  329,  495,  496,  509,  510,  509,  496,  497,  625,
     1006,  549,  497,  336,  337,  336,  338,  208,  550,  517,
      522,  365,  522,  523,  518,  553,  554,  553,  524,  516,
      516,  208,  525,  517,  516,  516,  516,  625,  527,  516,
      516,  516,  516,  516,  516,  528,  528,  516,  516,  516,
      516,  516,  349,  604,  530,  533,  354,  533,  534,  531,
      537,  361,  537,  535,  349,  148,  530,  148,  538,  555,
      628,  531,  543,  544,  543,  545,  538,  516,  516,  516,
      546,  547,  604,  534,  533,  354,  533,  534,  535,  537,

      361,  537,  535,  551,  552,  551,  534,  538,  322,  628,
      252,  535,  148,  323,  252,  516,  516,  516,  208,  528,
      517,  516,  516,  516,  614,  518,  516,  516,  516,  516,
      516,  516,  528,  528,  516,  516,  516,  516,  516,  556,
      557,  556,  558,  507,  523,  900,  148,  538,  555,  524,
      522,  365,  522,  523,  148,  538,  376,  148,  524,  559,
      560,  559,  523,  565,  516,  516,  516,  524,  369,  376,
      562,  566,  379,  566,  562,  563,  565,  576,  148,  563,
      567,  220,  567,  562,  577,  570,  571,  570,  563,  709,
      710,  709,  516,  565,  566,  379,  566,  562,  381,  252,

      573,  148,  563,  252,  148,  574,  579,  580,  579,  581,
      148,  148,  148,  615,  582,  516,  583,  208,  583,  517,
      516,  516,  516,  516,  518,  516,  516,  516,  516,  516,
      516,  621,  620,  516,  516,  516,  516,  516,  586,  208,
      587,  517,  208,  252,  517,  588,  518,  252,  208,  518,
      517,  208,  637,  517,  208,  518,  517,  616,  518,  621,
      620,  518,  148,  516,  516,  516,  516,  590,  208,  148,
      517,  589,  208,  844,  517,  518,  208,  374,  517,  518,
      622,  637,  591,  518,  601,  208,  374,  517,  148,  374,
      592,  516,  518,  593,  602,  623,  590,  594,  374,  589,

      208,  844,  517,  148,  402,  595,  402,  518,  596,  622,
      591,  626,  606,  601,  606,  609,  597,  609,  592,  374,
      148,  593,  602,  252,  623,  598,  594,  252,  148,  630,
      403,  374,  599,  595,  404,  374,  596,  617,  148,  405,
      626,  612,  610,  148,  597,  607,  148,  608,  632,  148,
      611,  624,  618,  598,  613,  613,  148,  627,  630,  403,
      599,  629,  148,  404,  618,  631,  619,  619,  148,  633,
      634,  610,  148,  607,  148,  608,  148,  632,  611,  624,
      148,  148,  148,  148,  148,  641,  627,  640,  148,  629,
      638,  148,  635,  631,  642,  148,  639,  663,  633,  634,

      646,  374,  648,  644,  148,  645,  148,  148,  643,  649,
      647,  148,  148,  148,  641,  148,  640,  148,  638,  650,
      635,  653,  659,  642,  639,  651,  655,  661,  646,  654,
      648,  652,  644,  645,  656,  148,  643,  649,  647,  148,
      148,  148,  660,  148,  657,  148,  662,  148,  650,  374,
      653,  659,  664,  651,  655,  665,  661,  654,  148,  652,
      658,  148,  656,  673,  148,  666,  374,  667,  668,  148,
      660,  669,  148,  657,  662,  670,  672,  675,  148,  148,
      148,  664,  148,  665,  148,  676,  671,  677,  658,  148,
      679,  673,  680,  666,  674,  667,  668,  148,  148,  148,

      669,  678,  681,  682,  670,  672,  148,  683,  148,  148,
      684,  691,  148,  676,  671,  685,  677,  148,  148,  679,
      325,  692,  674,  374,  148,  686,  693,  700,  687,  678,
      681,  688,  682,  694,  148,  683,  689,  689,  148,  684,
      200,  325,  697,  695,  685,  508,  809,  698,  700,  658,
      692,  690,  707,  686,  499,  693,  687,  702,  329,  702,
      703,  500,  694,  508, 1414,  704,  706,  505,  706,  507,
      707,  703,  695,  322,  707,  809,  704,  658,  323,  374,
      690,  702,  329,  702,  703,  708,  510,  708,  703,  704,
      706,  505,  706,  704,  501,  502,  501,  374,  707,  711,

      712,  711,  708,  510,  708,  703,  810,  707,  215,  358,
      704,  512,  513,  512,  208,  717,  714,  719,  365,  719,
      720,  715,  215,  374,  555,  721,  723,  361,  723,  717,
      558,  724,  720,  374,  724,  810,  148,  721,  719,  365,
      719,  720,  725,  560,  725,  720,  721,  553,  554,  553,
      721,  713,  713,  208,  726,  714,  713,  713,  713,  853,
      728,  713,  713,  713,  713,  713,  713,  729,  729,  713,
      713,  713,  713,  713,  349,  374,  731,  734,  354,  734,
      735,  732,  349,  540,  731,  736,  547,  853,  735,  732,
      738,  549,  374,  736,  740,  544,  740,  741,  744,  713,

      713,  713,  742,  734,  354,  734,  735,  745,  552,  745,
      735,  736,  555,  540,  752,  736,  723,  361,  723,  724,
      738,  750,  148,  558,  724,  912,  148,  713,  713,  713,
      208,  729,  714,  713,  713,  713,  148,  715,  713,  713,
      713,  713,  713,  713,  729,  729,  713,  713,  713,  713,
      713,  746,  557,  746,  748,  749,  748,  549,  751,  724,
      741,  148,  750,  376,  744,  742,  740,  544,  740,  741,
      761,  995,  811,  812,  742,  374,  713,  713,  713,  753,
      754,  753,  741,  755,  756,  755,  814,  742,  746,  557,
      746,  744,  745,  552,  745,  735,  724,  845,  374,  995,

      736,  811,  812,  376,  713,  725,  560,  725,  720,  369,
      761,  758,  405,  721,  821,  814,  759,  762,  379,  762,
      758,  763,  571,  763,  374,  759,  845,  822,  822,  761,
      762,  379,  762,  758,  764,  220,  764,  758,  759,  763,
      571,  763,  759,  381,  576,  766,  547,  761,  925,  576,
      767,  769,  771,  580,  771,  772,  769,  775,  776,  775,
      773,  778,  822,  772,  374,  777,  779,  788,  773,  771,
      580,  771,  772,  777,  789,  822,  822,  773,  780,  781,
      780,  772,  899,  329,  899,  900,  773,  713,  782,  208,
      782,  714,  713,  713,  713,  713,  715,  713,  713,  713,

      713,  713,  713,  148,  993,  713,  713,  713,  713,  713,
      586,  586,  785,  785,  374,  374,  830,  786,  786,  791,
      792,  791,  793,  796,  796,  797,  797,  794,  374,  148,
      798,  798,  208,  993,  714,  713,  713,  713,  713,  715,
      208,  208,  714,  714,  208,  830,  714,  715,  715,  148,
      208,  715,  714,  208,  208,  714,  714,  715,  833,  799,
      715,  715,  208,  713,  714,  208,  801,  714,  815,  715,
      815,  606,  715,  606,  805,  148,  817,  802,  817,  800,
      827,  148,  806,  148,  148,  803,  804,  833,  799,  832,
      808,  807,  148,  148,  609,  801,  609,  148,  819,  148,

      819,  818,  834,  805,  607,  802,  608,  800,  816,  827,
      148,  806,  618,  803,  804,  829,  828,  148,  832,  808,
      807,  610,  820,  840,  618,  148,  619,  619,  148,  611,
      818,  834,  607,  836,  608,  835,  816,  831,  837,  838,
      148,  148,  148,  829,  828,  148,  148,  148,  841,  839,
      610,  820,  840,  148,  842,  148,  843,  611,  848,  148,
      846,  148,  836,  148,  835,  831,  148,  837,  847,  148,
      148,  850,  148,  849,  148,  851,  148,  841,  839,  852,
      148,  148,  148,  842,  148,  843,  848,  148,  854,  846,
      857,  856,  861,  855,  148,  148,  860,  847,  858,  859,

      850,  849,  148,  148,  851,  148,  862,  865,  852,  148,
      863,  864,  867,  868,  148,  866,  854,  148,  857,  856,
      148,  861,  855,  871,  860,  869,  858,  859,  148,  148,
      870,  148,  148,  148,  862,  148,  865,  872,  863,  148,
      864,  867,  874,  866,  876,  875,  148,  148,  148,  148,
      873,  148,  871,  869,  882,  877,  878,  879,  148,  870,
      881,  148,  148,  880,  148,  148,  872,  148,  148,  883,
      884,  874,  885,  876,  875,  887,  890,  148,  873,  751,
      325,  930,  882,  148,  877,  878,  879,  897,  886,  881,
      888,  889,  880,  148,  148,  892,  148,  148,  883,  884,

      885,  200,  325,  894,  887,  891,  148,  215,  895,  897,
      863,  902,  505,  902,  909,  369,  886,  940,  888,  889,
      902,  505,  902,  892,  899,  329,  899,  900,  903,  510,
      903,  900,  374,  358,  891,  904,  712,  904,  863,  903,
      510,  903,  900,  709,  710,  709,  904,  712,  904,  208,
      215,  906,  911,  365,  911,  912,  907,  909,  914,  361,
      914,  911,  365,  911,  912,  915,  560,  915,  912,  914,
      361,  914,  916,  557,  916,  915,  560,  915,  912,  208,
      917,  906,  349,  349,  921,  921,  918,  374,  374,  922,
      922,  148,  148,  919,  919,  924,  354,  924,  925,  208,

      919,  906,  540,  540,  576,  381,  907,  946,  148,  927,
      927,  949,  947,  919,  919,  929,  544,  929,  930,  924,
      354,  924,  925,  932,  552,  932,  925,  934,  749,  934,
      929,  544,  929,  930,  935,  754,  935,  930,  936,  756,
      936,  932,  552,  932,  925,  916,  557,  916,  934,  749,
      934,  937,  938,  937,  935,  754,  935,  930,  936,  756,
      936,  942,  379,  942,  940,  943,  571,  943,  942,  379,
      942,  940,  943,  571,  943,  944,  220,  944,  940,  951,
      580,  951,  952,  576,  954,  776,  954,  778,  148,  952,
      949,  951,  580,  951,  952,  955,  781,  955,  952,  954,

      776,  954,  956,  957,  956,  955,  781,  955,  952,  905,
      958,  208,  958,  906,  905,  905,  905,  905,  907,  905,
      905,  905,  905,  905,  905, 1023,  994,  905,  905,  905,
      905,  905,  586,  586,  961,  961,  788,  972,  148,  962,
      962,  788,  374,  964,  966,  792,  966,  967,  964,  969,
      970,  969,  971, 1023,  967,  994, 1018,  905,  905,  905,
      905,  966,  792,  966,  967,  973,  974,  973,  967,  796,
      979,  976,  982,  983,  982,  984,  977,  980,  996,  208,
      796,  906,  976,  358, 1018,  905,  907,  977,  796,  208,
      976,  906,  208,  374,  906,  977,  907,  148,  208,  907,

      906,  208,  374,  906,  985,  907, 1015,  996,  907,  208,
      208,  906,  906,  796,  986,  976,  907,  907,  148,  997,
      977,  997,  815,  988,  815,  817,  987,  817,  779,  819,
      989,  819,  992,  985,  999, 1015,  999,  990, 1001,  148,
     1001, 1016,  779,  986,  991,  998, 1007, 1008, 1008,  148,
      818,  148,  988,  820,  987, 1004, 1009, 1005,  148,  989,
      148,  992,  816, 1010, 1000, 1011,  990,  148,  148, 1016,
     1006, 1002,  991,  148,  998, 1007,  148, 1012,  148,  818,
     1020, 1021,  820, 1019, 1022, 1009,  148,  148,  148,  148,
      816,  148, 1010, 1000, 1011,  148, 1017, 1013, 1027, 1002,

     1014, 1030, 1025,  148,  376,  148, 1012,  148,  148,  148,
     1031, 1024, 1019, 1022,  148, 1026, 1029,  148,  148,  148,
     1034, 1032,  376, 1036, 1017, 1013, 1035, 1027, 1014, 1028,
      148, 1025,  148, 1033,  148,  148,  148, 1037, 1031, 1024,
      148, 1038, 1040, 1026, 1039, 1029, 1041,  148, 1034, 1042,
     1032, 1043, 1036, 1045,  148, 1035, 1044, 1028,  148,  148,
      148, 1033,  148, 1046,  148,  148, 1037, 1052,  148, 1047,
     1038, 1040, 1039, 1049, 1050, 1041, 1059, 1048, 1042, 1043,
      148, 1045, 1051,  148, 1044,  148,  374, 1057,  148,  374,
      752,  148, 1046, 1058,  148, 1060, 1052, 1047,  148, 1053,

      148, 1054, 1049, 1050, 1059, 1048, 1062, 1061, 1063, 1064,
     1051, 1055, 1069,  148, 1056,  148, 1057,  148, 1070,  148,
      148, 1058,  325, 1068, 1060,  148, 1065, 1053,  325, 1077,
     1054,  405, 1214,  405, 1071, 1077, 1061,  549, 1064, 1055,
     1069, 1066, 1056, 1067, 1072,  200,  507, 1074, 1081,  752,
      549, 1068, 1075, 1082,  508, 1065, 1079, 1080, 1079, 1081,
     1214, 1086, 1071,  508, 1082, 1084, 1085, 1084, 1215, 1066,
     1086, 1067, 1072, 1086, 1087,  329, 1087, 1081, 1088,  505,
     1088,  555, 1082, 1090,  712, 1090, 1086, 1089,  510, 1089,
     1081, 1086,  208,  215, 1092, 1082, 1216, 1215,  215, 1093,

     1095, 1097, 1098, 1097, 1099, 1095, 1102, 1103, 1102, 1100,
      558,  405, 1099,  405, 1104,  555,  555, 1100, 1105,  365,
     1105, 1099, 1104, 1104, 1216,  555, 1100, 1106,  361, 1106,
     1107,  560, 1107, 1099,  997, 1104,  997,  508, 1100, 1108,
      557, 1108, 1110, 1111, 1112,  508,  148, 1104, 1235, 1113,
     1115, 1116, 1115, 1117, 1110,  349, 1112, 1120, 1100,  540,
      998, 1118, 1121, 1234,  148,  549, 1123, 1125, 1126, 1125,
     1127,  547, 1134, 1130, 1230, 1128,  540, 1235, 1131, 1132,
      354, 1132, 1130, 1123, 1136, 1137, 1136, 1131,  751,  998,
     1127, 1234, 1138,  752,  549, 1128, 1139,  544, 1139, 1127,

     1138, 1134,  752, 1230, 1128, 1140,  552, 1140, 1130, 1138,
     1141,  749, 1141, 1131, 1142,  754, 1142, 1127, 1138, 1143,
      756, 1143, 1128, 1144,  938, 1144,  369, 1134, 1146,  376,
      376, 1138, 1355, 1147,  148,  148, 1149, 1149, 1150,  379,
     1150, 1146, 1151,  571, 1151, 1217, 1147, 1217,  148,  576,
     1149, 1152,  220, 1152, 1146,  381, 1157, 1154, 1223, 1147,
      576, 1355, 1155, 1159, 1160, 1159, 1161, 1157, 1164, 1165,
     1164, 1162,  778,  148, 1161, 1218, 1166,  779,  779, 1162,
     1167,  580, 1167, 1161, 1166, 1166, 1223,  148, 1162, 1168,
      776, 1168, 1169,  781, 1169, 1161,  148, 1166,  788,  788,

     1162, 1170,  957, 1170, 1218, 1177, 1177,  374,  148, 1166,
     1091, 1171,  208, 1171, 1092, 1091, 1091, 1091, 1091, 1093,
     1091, 1091, 1091, 1091, 1091, 1091,  148, 1237, 1091, 1091,
     1091, 1091, 1091,  586,  586, 1174, 1174,  358,  148, 1243,
     1175, 1175, 1179, 1180, 1179, 1181, 1184, 1185, 1184,  971,
     1182, 1181,  569,  374, 1186, 1237, 1182, 1252, 1091, 1091,
     1091, 1091, 1187,  792, 1187, 1181,  972,  972, 1243, 1422,
     1182,  979,  374, 1186, 1186, 1188,  970, 1188, 1194, 1189,
      974, 1189, 1181, 1186,  374, 1252, 1091, 1182,  796,  979,
     1191, 1196, 1197, 1196, 1198, 1192, 1194, 1206, 1422, 1199,

     1201, 1202, 1201, 1204, 1203, 1198,  148,  374, 1203,  148,
     1199, 1205,  983, 1205, 1198,  208,  208, 1092, 1092, 1199,
      374,  148, 1093, 1093,  796,  208, 1191, 1092,  208, 1232,
     1092, 1192, 1093, 1224,  208, 1093, 1092,  208,  208, 1092,
     1092, 1093,  148, 1236, 1093, 1093,  999, 1001,  999, 1001,
     1208, 1221,  148, 1221, 1219, 1207, 1219, 1232, 1213, 1225,
     1231, 1224, 1210,  148,  148,  148, 1226,  148,  148, 1209,
     1227, 1236, 1228, 1229,  148, 1211, 1000,  148, 1208, 1212,
     1002, 1220, 1239, 1207, 1233,  148,  358, 1213, 1225,  374,
     1210,  148,  515, 1222, 1226,  148, 1238, 1209,  148, 1227,

     1242, 1228, 1229, 1211,  148, 1000,  148, 1212, 1002,  148,
     1220, 1239, 1233, 1240, 1245, 1244, 1241,  148,  148, 1246,
      148, 1222,  148,  148, 1238, 1253, 1247, 1249, 1242,  148,
     1251,  148, 1256, 1248,  374,  148,  148,  148, 1255,  148,
     1254, 1240, 1245, 1257,  148, 1241,  148, 1246,  148,  148,
      148, 1250, 1426, 1253, 1247, 1263, 1249, 1265,  148, 1251,
     1258, 1248, 1260, 1266,  148,  148, 1255,  148, 1259, 1254,
     1264, 1262, 1257, 1261,  148,  148,  148,  374, 1466, 1250,
     1267, 1426,  325, 1269, 1263, 1271,  374, 1270, 1258, 1077,
     1260,  148, 1266,  200, 1268, 1074, 1259, 1390, 1264, 1262,

     1075, 1261, 1273, 1274, 1273, 1081,  325, 1466,  508, 1267,
     1082, 1269,  358, 1077, 1271, 1086, 1270, 1275, 1276, 1275,
      508,  507, 1268, 1081,  148, 1086, 1390, 1086, 1082, 1079,
     1080, 1079, 1081, 1277, 1278, 1277, 1081, 1082, 1084, 1085,
     1084, 1082, 1279, 1280, 1279,  148, 1086, 1088,  505, 1088,
     1086, 1087,  329, 1087, 1081, 1086, 1090,  712, 1090, 1082,
     1089,  510, 1089, 1081, 1086,  208,  215, 1092, 1082, 1354,
     1356,  215, 1093, 1095, 1281, 1282, 1281, 1099, 1095, 1283,
     1284, 1283, 1100,  558,  148, 1099,  148, 1104,  555,  555,
     1100, 1097, 1098, 1097, 1099, 1104, 1104, 1354, 1356, 1100,

     1285, 1286, 1285, 1099, 1102, 1103, 1102,  148, 1100, 1287,
     1288, 1287, 1104, 1105,  365, 1105, 1099, 1104, 1106,  361,
     1106, 1100, 1107,  560, 1107, 1099, 1104, 1108,  557, 1108,
     1100, 1110,  148, 1112,  374, 1104, 1290, 1302, 1118, 1110,
     1111, 1112,  569, 1291, 1104,  540, 1113, 1293, 1294, 1293,
     1295, 1297, 1123, 1117,  374, 1296,  374,  540, 1100, 1115,
     1116, 1115, 1117, 1299, 1123, 1300, 1369, 1100,  374,  752,
      373, 1304, 1305, 1304, 1306,  349, 1138, 1120,  358, 1307,
      374,  515, 1121, 1308, 1309, 1308, 1127, 1310, 1311, 1310,
      751, 1128, 1127,  374, 1369, 1138,  148, 1128, 1125, 1126,

     1125, 1127, 1312, 1313, 1312, 1127, 1128,  547,  549, 1130,
     1128,  358,  374, 1371, 1131, 1134, 1314, 1315, 1314, 1130,
     1132,  354, 1132, 1130, 1131,  549,  752,  358, 1131, 1316,
     1317, 1316, 1134, 1138, 1136, 1137, 1136, 1134, 1318, 1319,
     1318, 1371, 1138,  148,  247,  243, 1138, 1139,  544, 1139,
     1127, 1140,  552, 1140, 1130, 1128, 1141,  749, 1141, 1131,
     1142,  754, 1142, 1127, 1138, 1143,  756, 1143, 1128, 1144,
      938, 1144,  369, 1134, 1146,  376,  148, 1138,  374, 1147,
      376, 1364, 1149, 1320, 1321, 1320, 1146, 1149, 1322, 1323,
     1322, 1147, 1150,  379, 1150, 1146, 1149, 1151,  571, 1151,

     1147, 1152,  220, 1152, 1146, 1149,  381,  576, 1154, 1147,
     1364, 1434,  576, 1155, 1157, 1324, 1325, 1324, 1161, 1157,
     1326, 1327, 1326, 1162,  778,  358, 1161,  198, 1166,  779,
      779, 1162, 1159, 1160, 1159, 1161, 1166, 1166,  317, 1434,
     1162, 1328, 1329, 1328, 1161, 1164, 1165, 1164,  148, 1162,
     1330, 1331, 1330, 1166, 1167,  580, 1167, 1161, 1166, 1168,
      776, 1168, 1162, 1169,  781, 1169, 1161, 1166, 1170,  957,
     1170, 1162,  148,  150,  148,  247, 1166, 1091, 1171,  208,
     1171, 1092, 1091, 1091, 1091, 1091, 1093, 1091, 1091, 1091,
     1091, 1091, 1091,  148,  244, 1091, 1091, 1091, 1091, 1091,

      586,  586, 1174, 1174,  788,  243, 1361, 1175, 1175,  788,
      198, 1177, 1332, 1333, 1332, 1181, 1177,  971,  148, 1181,
     1182, 1334, 1335, 1334, 1182, 1091, 1091, 1091, 1091, 1186,
     1179, 1180, 1179, 1181,  972, 1361,  148, 1389, 1182,  972,
      148, 1186, 1336, 1337, 1336, 1181, 1186, 1184, 1185, 1184,
     1182, 1561, 1373, 1091,   93, 1186, 1338, 1339, 1338, 1187,
      792, 1187, 1181,   93, 1186, 1389,   93, 1182, 1188,  970,
     1188, 1189,  974, 1189, 1181,  796, 1186, 1191,  979, 1182,
     1373, 1471, 1192,  979,   93, 1194, 1340, 1341, 1340, 1198,
     1194, 1342, 1343, 1342, 1199, 1204,  148, 1198,  122, 1203,

     1206, 1206, 1199, 1196, 1197, 1196, 1198, 1203, 1203,  148,
     1471, 1199, 1344, 1345, 1344, 1198, 1201, 1202, 1201, 1395,
     1199, 1346, 1347, 1346, 1203, 1205,  983, 1205, 1198, 1203,
      208, 1367, 1092, 1199,  208,  122, 1092, 1093,  796,   93,
     1191, 1093,  208,   93, 1092, 1192,  208, 1395, 1092, 1093,
      208,  148, 1092, 1093,  208, 1348, 1092, 1093, 1217, 1367,
     1217, 1093, 1357, 1219, 1357, 1219, 1221, 1359, 1221, 1359,
     1478, 1352,  148, 1349,  148,  117, 1365, 1366,  148, 1496,
      148, 1350,  148, 1362, 1348, 1351, 1353, 1363, 1218, 1358,
     1220,  148, 1360,  114,  148, 1375, 1368,  148,   95, 1478,

     1352, 1349, 1370, 1372, 1365, 1376, 1366, 1496, 1222, 1350,
      148,  148, 1362, 1351, 1353,  148, 1363, 1218, 1358, 1220,
     1374, 1360, 1377,  148, 1375, 1368, 1378,  148,  148,  148,
     1370,  148, 1372, 1380, 1376,  148, 1222, 1381,  148, 1382,
     1379,  148,  148, 1383,  148,  148,  148,  148,  148, 1374,
     1385, 1377,  148, 1384, 1378, 1387, 1392,  148,  148, 1388,
     1386, 1394, 1380, 1290, 1397,  148, 1381, 1391, 1382, 1379,
     1291,  148, 1383, 1393, 1501, 1396, 1399,   93,  148, 1385,
     1398, 1384, 1506, 1400, 1387, 1392, 1407, 1388, 1386, 1405,
     1394, 1295, 1397, 1408, 1431, 1391, 1296, 1273, 1274, 1273,

     1081, 1393, 1501, 1396, 1399, 1082, 1275, 1276, 1275, 1398,
     1506, 1400,   93,   55, 1086, 1277, 1278, 1277, 1081, 1279,
     1280, 1279, 1431, 1082, 1283, 1284, 1283, 1086, 1281, 1282,
     1281, 1099, 1104, 1287, 1288, 1287, 1100, 1285, 1286, 1285,
     1099, 1104, 1402, 1403, 1402, 1100, 1293, 1294, 1293, 1295,
     1404, 1561, 1561, 1561, 1296, 1409, 1410, 1409, 1295, 1299,
     1299, 1300, 1300, 1296, 1412, 1302,  373,  373, 1299, 1561,
     1300,  568, 1104, 1561, 1415,  373, 1306, 1304, 1305, 1304,
     1306, 1307, 1416, 1561, 1561, 1307, 1561, 1561, 1561, 1404,
     1417, 1418, 1417, 1306, 1308, 1309, 1308, 1127, 1307, 1310,

     1311, 1310, 1128, 1312, 1313, 1312, 1127, 1138, 1316, 1317,
     1316, 1128, 1314, 1315, 1314, 1130, 1134, 1318, 1319, 1318,
     1131, 1320, 1321, 1320, 1146, 1138, 1322, 1323, 1322, 1147,
     1324, 1325, 1324, 1161, 1149, 1326, 1327, 1326, 1162, 1328,
     1329, 1328, 1161, 1166, 1330, 1331, 1330, 1162, 1332, 1333,
     1332, 1181, 1166, 1334, 1335, 1334, 1182, 1336, 1337, 1336,
     1181, 1186, 1338, 1339, 1338, 1182, 1340, 1341, 1340, 1198,
     1186, 1342, 1343, 1342, 1199, 1344, 1345, 1344, 1198, 1203,
     1346, 1347, 1346, 1199,  208,  208, 1092, 1092, 1203, 1561,
     1561, 1093, 1093,  796,  208, 1191, 1092,  796,  148, 1191,

     1192, 1093,  148, 1561, 1192, 1419,  796, 1423, 1191, 1423,
     1357, 1424, 1357, 1192, 1420, 1359, 1427, 1359, 1427, 1430,
     1429,  148,  148, 1433,  148, 1425,  148,  148,  148,  148,
     1435,  148, 1438, 1439, 1419, 1421, 1437, 1358,  148, 1432,
     1360,  148, 1428, 1420, 1436,  148, 1440,  148, 1429,  148,
     1441, 1433, 1442,  148, 1561, 1444,  148,  148, 1561, 1435,
      148, 1438, 1439, 1421, 1449, 1437, 1358, 1432,  148, 1360,
     1443, 1428, 1436,  148, 1445, 1440, 1447, 1446, 1441, 1452,
     1450, 1442, 1451, 1444, 1453,  147,  147,  148,  148,  148,
      148,  148,  148, 1449, 1416, 1561, 1407, 1454, 1443, 1456,

     1457, 1404, 1445, 1408, 1455, 1446, 1561, 1452, 1561, 1450,
     1451, 1561, 1453, 1402, 1403, 1402, 1458, 1459, 1460, 1459,
     1412, 1404, 1461, 1462, 1461, 1404, 1454,  568, 1456, 1457,
     1408,  148, 1455, 1409, 1410, 1409, 1295, 1417, 1418, 1417,
     1306, 1296, 1561,  148, 1458, 1307,  208,  208, 1092, 1092,
      208,  148, 1092, 1093, 1093, 1475, 1423, 1093, 1423, 1427,
     1424, 1427, 1472,  148, 1472,  148, 1473, 1476,  148, 1479,
      148, 1474,  148, 1561, 1425,  148, 1481,  148,  148, 1463,
      148, 1477, 1464, 1475, 1480, 1428,  148,  148, 1561, 1465,
      148, 1484,  148, 1488, 1482, 1476, 1483, 1479, 1485, 1486,

     1489,  148, 1490, 1493,  148, 1481,  148, 1463, 1487, 1477,
     1464,  148, 1480, 1491, 1428, 1504,  796, 1465, 1191, 1484,
     1492, 1488, 1482, 1192, 1483,  148, 1485, 1561, 1486, 1489,
     1490, 1561, 1493, 1517, 1561, 1494, 1487, 1459, 1460, 1459,
     1561,  148, 1491,  148, 1504, 1404, 1511, 1561, 1492, 1461,
     1462, 1461,  208,  796, 1092, 1191,  148, 1408, 1561, 1093,
     1192,  148, 1517, 1494, 1497, 1498, 1497, 1505, 1468, 1499,
     1500, 1499, 1472,  148, 1472, 1511, 1473,  148,  148,  148,
     1507, 1474, 1508,  148, 1509,  148, 1495, 1510, 1512, 1470,
     1516,  148, 1513,  148, 1514, 1505,  148,  796,  148, 1191,

     1525, 1497, 1498, 1497, 1192, 1468,  148,  148, 1507, 1515,
      148, 1508, 1509,  148, 1495, 1533, 1510, 1512, 1518, 1516,
     1524, 1513, 1519, 1514, 1499, 1500, 1499,  148, 1525,  148,
      148, 1531, 1529, 1534, 1526, 1530, 1561, 1515, 1528, 1532,
     1527, 1561, 1561, 1533, 1470, 1561, 1518,  148, 1524,  148,
     1519, 1535, 1536, 1535,  148, 1522, 1537, 1538, 1537, 1531,
     1529, 1534, 1526, 1530, 1539, 1523, 1540, 1528, 1532, 1527,
      148, 1542,  148, 1535, 1536, 1535,  148, 1522, 1537, 1538,
     1537, 1546,  148,  148,  148, 1543,  148, 1523, 1541, 1550,
     1551,  148, 1548, 1539, 1540, 1553, 1554, 1556, 1552, 1542,

     1547, 1561, 1549,  148, 1555, 1557, 1559, 1560, 1561, 1561,
     1546, 1561, 1558, 1561, 1543, 1561, 1541, 1550, 1551, 1561,
     1561, 1548, 1561, 1561, 1553, 1554, 1556, 1552, 1547, 1561,
     1549, 1561, 1555, 1557, 1561, 1559, 1560, 1561, 1561, 1561,
     1561, 1558,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,

       82,   82,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  121,  121,

      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  147,  147,
      151,  151, 1561, 1561,  151,  151,  196,  196, 1561,  196,
      196,  196,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  203,  203,  203,  203,

      203,  203,  203,  203,  203,  203,  203,  203,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248, 1561,  248,  254, 1561,
     1561, 1561, 1561,  254,  260,  260,  260,  260,  260,  260,
      260,  260, 1561,  260,  260,  260,  149,  149, 1561, 1561,
      149,  150,  150, 1561, 1561,  150,  193,  193, 1561,  193,

      193,  194,  194, 1561,  194,  194,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,

      343,  343,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  375,  375,

      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248, 1561,  248,  410,  410,  410,  410,
      410,  410, 1561,  410,  410,  410,  410,  410,  254, 1561,
     1561, 1561, 1561,  254,  147,  147,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      494,  494,  494,  494,  494,  494,  494,  494,  494,  494,

      494,  494,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  526,  526,

      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  564,  564,  564,  564,  564,  564,

      564,  564,  564,  564,  564,  564,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  410,  410,
      410,  410,  410,  410, 1561,  410,  410,  410,  410,  410,
      254, 1561, 1561, 1561, 1561,  254, 1561,  254,  147,  147,

      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  701,  701,  701,  701,  701,  701,
      701,  701,  701,  701,  701,  701,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  718,  718,  718,  718,

      718,  718,  718,  718,  718,  718,  718,  718,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  747,  747,  747,  747,  747,  747,  747,  747,

      747,  747,  747,  747,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  783,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  783,  783,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,

      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  795,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      147,  147,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  901,  901,

      901,  901,  901,  901,  901,  901,  901,  901,  901,  901,
      905,  905,  905,  905,  905,  905,  905,  905,  905,  905,
      905,  905,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  926,  926,  926,  926,  926,  926,  926,  926,
      926,  926,  926,  926,  928,  928,  928,  928,  928,  928,

      928,  928,  928,  928,  928,  928,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      950,  950,  950,  950,  950,  950,  950,  950,  950,  950,

      950,  950,  953,  953,  953,  953,  953,  953,  953,  953,
      953,  953,  953,  953,  959,  959,  959,  959,  959,  959,
      959,  959,  959,  959,  959,  959,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  963,  963,
      963,  963,  963,  963,  963,  963,  963,  963,  963,  963,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  968,  968,  968,  968,  968,  968,
      968,  968,  968,  968,  968,  968,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  975,  321,  321,

      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,
      978,  978,  981,  981,  981,  981,  981,  981,  981,  981,
      981,  981,  981,  981, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003,  147,  147, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1076,
     1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076,
     1076, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1091, 1091, 1091, 1091, 1091,

     1091, 1091, 1091, 1091, 1091, 1091, 1091, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
     1109, 1109, 1109, 1109, 1109, 1114, 1114, 1114, 1114, 1114,
     1114, 1114, 1114, 1114, 1114, 1114, 1114, 1119, 1119, 1119,
     1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124,

     1124, 1124, 1124, 1129, 1129, 1129, 1129, 1129, 1129, 1129,
     1129, 1129, 1129, 1129, 1129, 1133, 1133, 1133, 1133, 1133,
     1133, 1133, 1133, 1133, 1133, 1133, 1133, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1145,
     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
     1145, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1163,

     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
     1163, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1173, 1173, 1173, 1173, 1173, 1173, 1173,
     1173, 1173, 1173, 1173, 1173, 1176, 1176, 1176, 1176, 1176,
     1176, 1176, 1176, 1176, 1176, 1176, 1176, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1193, 1193, 1193, 1193, 1193,

     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1091, 1091, 1091, 1091, 1091, 1091, 1091,
     1091, 1091, 1091, 1091, 1091,  147,  147, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1076,
     1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076,
     1076, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1083, 1083, 1083, 1083, 1083, 1083, 1083,

     1083, 1083, 1083, 1083, 1083, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
     1109, 1109, 1109,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321, 1289, 1289, 1289, 1289, 1289,
     1289, 1289, 1289, 1289, 1289, 1289, 1289, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1114,
     1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114,

     1114, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1301, 1301, 1301, 1301, 1301, 1301, 1301,
     1301, 1301, 1301, 1301, 1301, 1303, 1303, 1303, 1303, 1303,
     1303, 1303, 1303, 1303, 1303, 1303, 1303, 1119, 1119, 1119,
     1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124,
     1124, 1124, 1124, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1129, 1129, 1129, 1129, 1129,
     1129, 1129, 1129, 1129, 1129, 1129, 1129, 1133, 1133, 1133,

     1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133, 1145,
     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
     1145, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1163,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
     1163, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1173, 1173, 1173, 1173, 1173, 1173, 1173,

     1173, 1173, 1173, 1173, 1173, 1176, 1176, 1176, 1176, 1176,
     1176, 1176, 1176, 1176, 1176, 1176, 1176, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1091,
     1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091,

     1091,  147,  147, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289,
     1289, 1289, 1289,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1406,

     1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406,
     1406, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1411, 1411, 1411, 1411, 1411, 1411, 1411,
     1411, 1411, 1411, 1411, 1411, 1301, 1301, 1301, 1301, 1301,
     1301, 1301, 1301, 1301, 1301, 1301, 1301, 1413, 1413, 1413,
     1413, 1413, 1561, 1413, 1413, 1413, 1413, 1413, 1413, 1303,
     1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303,
     1303, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124,
     1124, 1124, 1124, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1129, 1129, 1129, 1129, 1129,

     1129, 1129, 1129, 1129, 1129, 1129, 1129, 1133, 1133, 1133,
     1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133, 1145,
     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
     1145, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,

     1195, 1195, 1195, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1091, 1091, 1091, 1091, 1091,
     1091, 1091, 1091, 1091, 1091, 1091, 1091, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,  147,
      147, 1448, 1561, 1561, 1561, 1448, 1448, 1467, 1561, 1467,
     1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1469,
     1561, 1469, 1469, 1469, 1469, 1469, 1469, 1469, 1469, 1469,
     1469, 1502, 1561, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1503, 1561, 1503, 1503, 1503, 1503, 1503,
     1503, 1503, 1503, 1503, 1503,   47, 1561, 1561, 1561, 1561,

     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561
    } ;

static const flex_int16_t yy_chk[8074] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   11,   13,   12,   14,    7,   15,   52,
       52,   99,   11,   11,   12,   12, 1558,   15,   99,  125,
      125,    7,   25,   25,   25,   25,   15,   35,    1,    1,
        1,    1,   30,   30,   30,   30,    7,   17,   18,  132,
     1553,   35,   35,  132,  146,  146,   17,   18, 1548,    7,
       13,   13,   14,   14,   15,    8,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        8,   16,   36,   17,   18,  254,   41,   50,  200,  254,
       16,   56,   56,  200,    8,   41,   36,   36,   41,   16,
       50,   50,   56, 1547,  193,    2,    2,    2,    2,    8,
      193, 1541,   19,   96,   19,   96,   19,   19,   77,   77,
       96,   19,    8, 1534,   19,   77, 1533,   16,  106,   77,
      106,  106,   41,    2,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,   28,   19,   28,
       20,   42,   20, 1532,   20,   20,   70,  234,   28,   20,
       42,   70,   20,   42,   97,   70,   97,  247,  247,  247,

       28,   97,    3,    3,    3,    3,   19, 1528,  100,   45,
      100,  118,   46,  118,  118,  100,  234,  140,   45,  140,
       70,   46, 1526,  140,   70,   45,   20,   42,   46,   28,
        3,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,   20,   45,  242,   63,   46,   60,
     1514,   73,   26,   26,   26,   26,   57,   26,   60,   65,
       69,   66,   57,   57,   26,   61,   63,   67,   60,    4,
        4,    4,    4,   26,   73,  242,   26, 1513,   65,   57,
       66,   61,   69,   61,   58,   69,   67,   60,  204,   58,

      128,   57,   57,  204,   63,   68,   60,    4,    5,  108,
       58,  108,   73,  128,  128,   26,   65,   57,   66,   61,
       69,   61,  280,   69,   67,   68, 1512,  152,   58,    5,
        5,    5,    5,    5,    5,    5,  108,    5,   58,  280,
        5,    5,    5,    5,    5, 1511,    5,    5,    5,    5,
      152,    5,  109,   68,  109,  109, 1510,  109,    5,    5,
        5,    5,    5,    5,    5,  108,    5,  280,    5,    5,
        5,    5,    5,  109,    5,    5,    5,    5,  152,    5,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,   59,  175,   74,   64,  145,   59,  158,
       74,  199,  175,  199,  158,   59,   64,   74,  199,   59,
      145,  145,   59,   64,   64,   59, 1507,   74,    9,    9,
        9,    9,  101,  101,  101,  101,  166,   59,  131,   74,
      101,  175,  131,  158,   59,   64,   74,   59,  131,  131,
       59,   64,   64,   59,  166,   74,    9,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
      151,  151,  166,   75,   62,  153,   71,   76,  110,  208,
      110,  151,  153,  321,  208,   71,   76,   62,  321,   75,

       62,   75, 1505,   62,  169,   10,   10,   10,   10,   62,
     1503,   71,   76,  156,  110,  111,  155,  111,  110,  249,
      249,  153,  169,  155,   71,   76,   62,   75,   62,   75,
      154,   62,  156,   10,   24,   24,   24,   62,   24,   71,
       76,   24,  111,  110,  103,   24,  103,  110,   24,   24,
      169,  103,  155,  154,   24,  196,  196,   24,   24, 1502,
      156,  201,  196,  203,  103,  203,  196, 1501,  201,  205,
      203,  111,  202,  202,  202,  202,  205,  259,  259, 1496,
      202,  154,  206,  206,  206,  206,   24,   24,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,

       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   72,  157,  159,  207,  162,
      207,  177,  159,  160,  134,  207,  162,   72,  134,  161,
      177,  210,  157,  315,   72,  162,  159, 1494,  210,  157,
      160,  160,  161,  211,   72,  211,  212,  212,  212,  212,

      211,  159,  349,  134,  212,  162,   72,  349,  214,  177,
      157,  315,   72,  162,  159,  214,  133,  157,  160,  160,
      133,  161,   72,   98,   98,   98,   98,   98,   98,   98,
       98,  134,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,  133,  133,  172,  174,
      133,  176,  183,  184,  187,  189,  262,  164,  183,  335,
      174,  335,  184,  187,  189,  262,  164, 1485,  172,  176,
      221,   98,   98,   98,  133,  133, 1484,  221,  133,  218,
      164,  218,  216,  216,  216, 1476,  218,  183, 1469,  174,
      216,  184,  187,  189,  262,  164,  172,  176,  167,   98,

      102,  102,  102,  102,  102,  102,  102,  102,  164,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  167,  163,  168,  178,  188,  163,  223,
      170,  223,  297,  398,  165,  163,  223,  319,  179,  178,
      188,  165,  165,  180,  319,  178,  186,  168,  102,  102,
      102,  167,  381,  163,  170,  163,  182,  381,  165,  165,
      179,  180,  398, 1467,  163,  297,  186,  322,  178,  188,
      165,  165,  182,  178,  322,  168,  102,  104,  104,  104,
      104,  163,  170,  163,  173,  104,  165,  165,  179,  180,
      181,  173,  274,  267,  186,  181,  230,  181,  230,  104,

      182,  190,  267,  230, 1458,  173,  104,  232,  173,  232,
      104,  274,  181,  104,  190, 1457,  104,  181,  275,  230,
      173,  192,  191,  104,  181, 1456,  181,  275,  104,  191,
      191,  267,  192,  173,  232,  104,  173,  192,  104,  274,
      181,  104,  324,  190,  104,  181,  191,  191,  230,  324,
      330,  104,  217,  217,  217,  217,  275,  330,  191,  191,
      217,  192,  332,  232,  231,  192,  231,  231,  245,  332,
      245,  245,  614,  614,  191,  191,  209,  209,  209,  209,
      209,  209,  209,  209, 1455,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  219,

      219,  219,  219,  222,  222,  222,  222,  219,  278,  261,
      235,  222,  235,  235,  278,  235,  405,  239,  405,  239,
      244,  229,  244,  229,  209,  209,  209,  226,  229,  226,
      318,  235,  318,  261,  226,  244,  244,  318,  323,  323,
      323,  323,  340,  278,  225,  239,  225,  239,  226,  340,
      229,  225,  209,  213,  213,  213,  213,  213,  213,  213,
      213,  261,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  225,  226,  240,  229,
      266,  251,  264,  225, 1454,  396,  240,  615,  615,  281,
      233,  241,  233,  241,  251,  251,  266,  264,  281,  616,

      616,  213,  213,  213,  225,  253,  271,  240,  255,  253,
     1448,  225,  255,  396,  240,  253,  253,  233,  241,  334,
      334,  334,  617,  617,  266,  264,  271,  281,  255,  213,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  233,  241,  224,  224,
      224,  224,  224,  227,  271,  227,  236,  255,  236,  228,
      227,  228,  269,  256, 1444,  272,  228,  256,  238,  243,
      238,  243,  258,  257,  227, 1432,  258,  257,  224,  224,
      224,  224,  236,  228, 1425,  269,  236,  407,  227,  272,
     1424,  263,  228,  228,  238,  243,  268,  256,  238,  243,

      407,  407,  276,  227,  263,  273,  224,  257,  258,  270,
      263,  236,  228,  269,  268,  236,  227,  272,  268,  265,
      228,  228,  276,  238,  243,  256,  265,  238,  243,  273,
      277,  276,  270,  263,  282,  257,  258,  286,  263,  279,
     1072,  285,  268,  284, 1072,  286,  268,  287, 1418,  277,
      276,  279, 1415,  282,  290,  265,  292,  273,  285,  291,
      270,  289,  288, 1414,  346,  284,  294,  288,  289,  293,
      287,  346,  292,  290,  286,  294,  301,  277,  296, 1413,
      279,  282,  283,  401,  291,  301,  285,  283,  283,  283,
      283,  283,  283,  284,  293,  283,  288,  289,  287,  283,

      292,  290,  283,  296,  294,  283,  283,  298,  299,  283,
      295,  401,  291,  304,  301, 1412,  283,  283,  283,  283,
      283,  283,  293,  295,  283,  298,  299,  283,  300,  302,
      283,  296,  303,  283,  283,  300,  305,  283,  304,  300,
      303,  307,  309,  306,  302,  305,  310,  312,  303,  433,
      307,  313,  295,  298,  299,  310,  306,  314,  308,  604,
      309,  316,  586,  350,  300,  306,  304,  586,  300,  303,
      350,  312,  302,  313,  305,  308,  303,  433,  316,  307,
      308,  314, 1410, 1405,  310,  306, 1398,  604,  309,  320,
      320,  320,  320,  306,  326,  326,  326,  320,  327,  312,

      327,  313,  326,  308,  421,  327,  316,  822,  308,  314,
      328,  328,  328,  328,  331,  331,  331,  331,  328,  421,
      822,  355,  331,  336,  336,  336,  336,  339,  355,  339,
      341,  341,  341,  341,  339,  358,  358,  358,  341,  342,
      342,  342,  342,  342,  342,  342,  342,  421,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  343,  400,  343,  344,  344,  344,  344,  343,
      347,  347,  347,  344,  348,  425,  348, 1394,  347,  359,
      425,  348,  351,  351,  351,  351,  359,  342,  342,  342,
      351,  352,  400,  352,  353,  353,  353,  353,  352,  360,

      360,  360,  353,  356,  356,  356,  356,  360,  796,  425,
      411,  356, 1392,  796,  411,  342,  345,  345,  345,  345,
      345,  345,  345,  345,  411,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  362,
      362,  362,  363,  701,  363,  701, 1384,  362,  366,  363,
      364,  364,  364,  364, 1381,  366,  370, 1378,  364,  367,
      367,  367,  367,  370,  345,  345,  345,  367,  368,  375,
      368,  371,  371,  371,  371,  368,  375,  382, 1374,  371,
      372,  372,  372,  372,  382,  377,  377,  377,  372,  500,
      500,  500,  345,  377,  378,  378,  378,  378,  380,  412,

      380, 1373,  378,  412, 1367,  380,  383,  383,  383,  383,
      416,  417, 1364,  412,  383,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  417,  416,  384,  384,  384,  384,  384,  385,  386,
      385,  386,  387,  413,  387,  385,  386,  413,  388,  387,
      388,  389,  434,  389,  390,  388,  390,  413,  389,  417,
      416,  390, 1362,  384,  384,  384,  384,  387,  391,  418,
      391,  386,  392,  636,  392,  391,  393, 1345,  393,  392,
      418,  434,  388,  393,  397,  394, 1341,  394,  419, 1337,
      389,  384,  394,  390,  397,  419,  387,  391, 1333,  386,

      395,  636,  395,  423,  402,  392,  402,  395,  392,  418,
      388,  423,  403,  397,  403,  404,  393,  404,  389, 1329,
      427,  390,  397,  414,  419,  394,  391,  414,  420,  427,
      402, 1325,  395,  392,  402, 1321,  392,  414,  426,  406,
      423,  406,  404,  429,  393,  403,  424,  403,  429,  428,
      404,  420,  415,  394,  406,  406,  430,  424,  427,  402,
      395,  426,  431,  402,  415,  428,  415,  415,  432,  430,
      431,  404,  435,  403,  437,  403,  438,  429,  404,  420,
      436,  439,  441,  444,  442,  438,  424,  437,  443,  426,
      435,  445,  432,  428,  439,  440,  436,  455,  430,  431,

      442, 1315,  444,  440,  455,  441,  446,  448,  439,  445,
      443,  447,  449,  451,  438,  452,  437,  453,  435,  446,
      432,  447,  451,  439,  436,  446,  448,  452,  442,  447,
      444,  446,  440,  441,  449,  450,  439,  445,  443,  457,
      456,  458,  451,  461,  450,  460,  453,  465,  446, 1313,
      447,  451,  456,  446,  448,  457,  452,  447,  462,  446,
      450,  468,  449,  465,  463,  458, 1309,  460,  461,  464,
      451,  462,  466,  450,  453,  463,  464,  467,  469,  470,
      475,  456,  472,  457,  467,  468,  463,  469,  450,  477,
      472,  465,  473,  458,  466,  460,  461,  478,  476,  473,

      462,  470,  475,  476,  463,  464,  480,  477,  479,  481,
      478,  484,  485,  468,  463,  479,  469,  486,  484,  472,
      490,  485,  466, 1305,  487,  480,  486,  490,  481,  470,
      475,  483,  476,  487,  488,  477,  483,  483,  483,  478,
      489,  492,  489,  488,  479,  496,  600,  489,  492,  487,
      485,  483,  496,  480,  498,  486,  481,  491,  491,  491,
      491,  498,  487,  503, 1302,  491,  493,  493,  493,  494,
      503,  494,  488, 1110,  493,  600,  494,  487, 1110, 1294,
      483,  495,  495,  495,  495,  497,  497,  497,  497,  495,
      504,  504,  504,  497,  501,  501,  501,  501,  504,  506,

      506,  506,  509,  509,  509,  509,  601,  506,  517, 1290,
      509,  512,  512,  512,  516,  517,  516,  518,  518,  518,
      518,  516,  519, 1286,  523,  518,  520,  520,  520,  519,
      521,  523,  521, 1282,  520,  601,  645,  521,  522,  522,
      522,  522,  524,  524,  524,  524,  522,  553,  553,  553,
      524,  525,  525,  525,  525,  525,  525,  525,  525,  645,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  526, 1278,  526,  527,  527,  527,
      527,  526,  529,  530,  529,  527,  532,  645,  532,  529,
      530,  534, 1274,  532,  531,  531,  531,  531,  534,  525,

      525,  525,  531,  533,  533,  533,  533,  535,  535,  535,
      535,  533,  536,  539,  545,  535,  537,  537,  537,  536,
      539,  545, 1255,  718,  537,  718, 1254,  525,  528,  528,
      528,  528,  528,  528,  528,  528, 1233,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  538,  538,  538,  541,  541,  541,  548,  542,  538,
      542, 1232,  541,  562,  548,  542,  543,  543,  543,  543,
      562,  813,  602,  603,  543, 1204,  528,  528,  528,  546,
      546,  546,  546,  550,  550,  550,  605,  546,  556,  556,
      556,  550,  551,  551,  551,  551,  556,  637, 1197,  813,

      551,  602,  603,  564,  528,  559,  559,  559,  559,  561,
      564,  561,  612,  559,  612,  605,  561,  563,  563,  563,
      563,  565,  565,  565, 1180,  563,  637,  612,  612,  565,
      566,  566,  566,  566,  567,  567,  567,  567,  566,  570,
      570,  570,  567,  572,  573,  572,  733,  570,  733,  575,
      572,  573,  574,  574,  574,  574,  575,  577,  577,  577,
      574,  578,  613,  578, 1160,  577,  581,  587,  578,  579,
      579,  579,  579,  581,  587,  613,  613,  579,  582,  582,
      582,  582,  698,  698,  698,  698,  582,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,

      583,  583,  583,  623,  809,  583,  583,  583,  583,  583,
      584,  585,  584,  585, 1126, 1098,  623,  584,  585,  588,
      588,  588,  588,  589,  590,  589,  590,  588, 1080, 1059,
      589,  590,  591,  809,  591,  583,  583,  583,  583,  591,
      592,  593,  592,  593,  594,  623,  594,  592,  593,  626,
      595,  594,  595,  597,  596,  597,  596,  595,  626,  591,
      597,  596,  598,  583,  598,  599,  593,  599,  607,  598,
      607,  606,  599,  606,  597,  620,  608,  594,  608,  592,
      620,  625,  597, 1053, 1051,  595,  596,  626,  591,  625,
      599,  598,  621,  627,  609,  593,  609,  622,  611, 1049,

      611,  608,  627,  597,  606,  594,  606,  592,  607,  620,
      632,  597,  619,  595,  596,  622,  621,  624,  625,  599,
      598,  609,  611,  632,  619,  629,  619,  619,  628,  609,
      608,  627,  606,  629,  606,  628,  607,  624,  629,  630,
      631,  633,  640,  622,  621,  634,  630,  635,  633,  631,
      609,  611,  632,  638,  634,  641,  635,  609,  640,  639,
      638,  642,  629,  643,  628,  624,  649,  629,  639,  646,
      644,  642,  654,  641,  650,  643,  651,  633,  631,  644,
      647,  652, 1046,  634,  655,  635,  640,  656,  646,  638,
      650,  649,  655,  647,  657,  660,  654,  639,  651,  652,

      642,  641,  659,  661,  643,  658,  656,  659,  644,  665,
      657,  658,  661,  664,  667,  660,  646,  666,  650,  649,
      664,  655,  647,  667,  654,  665,  651,  652,  669,  668,
      666,  681, 1045,  670,  656,  671,  659,  668,  657,  672,
      658,  661,  670,  660,  672,  671,  673,  674,  684,  677,
      669,  679,  667,  665,  681,  673,  674,  677,  678,  666,
      679,  682,  683,  678,  685,  687,  668,  686,  690,  682,
      683,  670,  684,  672,  671,  686,  693,  695,  669,  739,
      697,  739,  681,  693,  673,  674,  677,  697,  685,  679,
      687,  690,  678, 1034,  694,  695, 1027, 1017,  682,  683,

      684,  696,  699,  696,  686,  694, 1008,  714,  696,  699,
      694,  700,  700,  700,  714,  757,  685,  757,  687,  690,
      706,  706,  706,  695,  702,  702,  702,  702,  704,  704,
      704,  704,  983,  979,  694,  707,  707,  707,  694,  708,
      708,  708,  708,  709,  709,  709,  711,  711,  711,  713,
      716,  713,  715,  715,  715,  715,  713,  716,  717,  717,
      717,  719,  719,  719,  719,  721,  721,  721,  721,  723,
      723,  723,  724,  724,  724,  725,  725,  725,  725,  726,
      726,  726,  727,  730,  727,  730,  726,  974,  971,  727,
      730,  871,  869,  726,  726,  728,  728,  728,  728,  729,

      729,  729,  731,  737,  766,  765,  729,  765,  850,  731,
      737,  766,  765,  729,  729,  732,  732,  732,  732,  734,
      734,  734,  734,  736,  736,  736,  736,  738,  738,  738,
      740,  740,  740,  740,  742,  742,  742,  742,  744,  744,
      744,  745,  745,  745,  745,  746,  746,  746,  748,  748,
      748,  750,  750,  750,  753,  753,  753,  753,  755,  755,
      755,  759,  759,  759,  759,  761,  761,  761,  762,  762,
      762,  762,  763,  763,  763,  764,  764,  764,  764,  767,
      767,  767,  767,  768,  769,  769,  769,  770,  829,  770,
      768,  771,  771,  771,  771,  773,  773,  773,  773,  775,

      775,  775,  777,  777,  777,  780,  780,  780,  780,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  845,  812,  782,  782,  782,
      782,  782,  783,  784,  783,  784,  785,  793,  840,  783,
      784,  787,  792,  785,  786,  786,  786,  786,  787,  789,
      789,  789,  790,  845,  790,  812,  840,  782,  782,  782,
      782,  791,  791,  791,  791,  794,  794,  794,  794,  795,
      797,  795,  798,  798,  798,  798,  795,  797,  814,  799,
      800,  799,  800,  788,  840,  782,  799,  800,  801,  802,
      801,  802,  803,  781,  803,  801,  802,  836,  804,  803,

      804,  805,  778,  805,  799,  804,  836,  814,  805,  807,
      806,  807,  806,  808,  802,  808,  807,  806,  837,  816,
      808,  816,  815,  804,  815,  817,  803,  817,  774,  819,
      805,  819,  807,  799,  818,  836,  818,  806,  820,  827,
      820,  837,  772,  802,  806,  816,  827,  828,  828,  828,
      817,  830,  804,  819,  803,  821,  830,  821,  831,  805,
      832,  807,  815,  831,  818,  832,  806,  833,  839,  837,
      821,  820,  806,  834,  816,  827,  835,  833,  841,  817,
      842,  843,  819,  841,  844,  830,  846,  842,  843,  848,
      815,  853,  831,  818,  832,  847,  839,  834,  848,  820,

      835,  852,  847,  856,  760,  849,  833,  851,  852,  855,
      853,  846,  841,  844,  854,  847,  851,  857,  858,  861,
      856,  854,  758,  858,  839,  834,  857,  848,  835,  849,
      859,  847,  860,  855,  864,  862,  865,  859,  853,  846,
      863,  860,  862,  847,  861,  851,  862,  867,  856,  863,
      854,  864,  858,  865,  866,  857,  864,  849,  870,  880,
      874,  855,  875,  866,  872,  873,  859,  875,  879,  867,
      860,  862,  861,  872,  873,  862,  880,  870,  863,  864,
      878,  865,  874,  876,  864,  881,  754,  878,  888,  751,
      747,  877,  866,  879,  882,  881,  875,  867,  887,  876,

      885,  877,  872,  873,  880,  870,  883,  882,  884,  885,
      874,  877,  888,  883,  877,  884,  878,  891,  889,  886,
      892,  879,  894,  887,  881,  889,  886,  876,  896,  894,
      877, 1004,  993, 1004,  891,  896,  882,  743,  885,  877,
      888,  886,  877,  886,  892,  893,  898,  893,  898,  741,
      735,  887,  893,  898,  900,  886,  895,  895,  895,  895,
      993,  900,  891,  901,  895,  897,  897,  897,  995,  886,
      901,  886,  892,  897,  899,  899,  899,  899,  902,  902,
      902,  722,  899,  904,  904,  904,  902,  903,  903,  903,
      903,  904,  905,  906,  905,  903,  996,  995,  908,  905,

      906,  907,  907,  907,  907,  908,  909,  909,  909,  907,
      910, 1005,  910, 1005,  909,  912,  913,  910,  911,  911,
      911,  911,  912,  913,  996,  720,  911,  914,  914,  914,
      915,  915,  915,  915,  997,  914,  997,  705,  915,  916,
      916,  916,  917,  917,  917,  703,  692,  916, 1023,  917,
      918,  918,  918,  918,  919,  920,  919,  920,  918,  921,
      997,  919,  920, 1022, 1015,  925,  921,  922,  922,  922,
      922,  923,  925,  923, 1015,  922,  926, 1023,  923,  924,
      924,  924,  924,  926,  927,  927,  927,  924,  928,  997,
      928, 1022,  927,  930,  931,  928,  929,  929,  929,  929,

      930,  931,  933, 1015,  929,  932,  932,  932,  932,  933,
      934,  934,  934,  932,  935,  935,  935,  935,  934,  936,
      936,  936,  935,  937,  937,  937,  939,  936,  939,  940,
      941,  937, 1215,  939, 1007,  689,  940,  941,  942,  942,
      942,  942,  943,  943,  943,  998,  942,  998,  676,  946,
      943,  944,  944,  944,  944,  945,  946,  945, 1007,  944,
      948, 1215,  945,  947,  947,  947,  947,  948,  949,  949,
      949,  947,  950,  662,  950,  998,  949,  952,  953,  950,
      951,  951,  951,  951,  952,  953, 1007,  653,  951,  954,
      954,  954,  955,  955,  955,  955,  648,  954,  961,  963,

      955,  956,  956,  956,  998,  961,  963,  580, 1025,  956,
      958,  958,  958,  958,  958,  958,  958,  958,  958,  958,
      958,  958,  958,  958,  958,  958, 1033, 1025,  958,  958,
      958,  958,  958,  959,  960,  959,  960,  576, 1043, 1033,
      959,  960,  962,  962,  962,  962,  964,  964,  964,  965,
      962,  965,  568,  560,  964, 1025,  965, 1043,  958,  958,
      958,  958,  966,  966,  966,  966,  967,  968, 1033, 1354,
      966,  976,  558,  967,  968,  969,  969,  969,  976,  973,
      973,  973,  973,  969,  552, 1043,  958,  973,  975,  978,
      975,  977,  977,  977,  977,  975,  978,  984, 1354,  977,

      980,  980,  980,  981,  984,  981, 1018,  547,  980, 1009,
      981,  982,  982,  982,  982,  985,  986,  985,  986,  982,
      544, 1024,  985,  986,  987,  988,  987,  988,  989, 1018,
      989,  987,  988, 1009,  990,  989,  990,  992,  991,  992,
      991,  990, 1011, 1024,  992,  991,  999, 1001,  999, 1001,
      986, 1002, 1010, 1002, 1000,  985, 1000, 1018,  992, 1010,
     1016, 1009,  989, 1013, 1014, 1012, 1011, 1016, 1019,  988,
     1012, 1024, 1013, 1014, 1026,  990,  999, 1028,  986,  991,
     1001, 1000, 1028,  985, 1019, 1032,  540,  992, 1010,  514,
      989, 1029,  511, 1002, 1011, 1037, 1026,  988, 1036, 1012,

     1032, 1013, 1014,  990, 1038,  999, 1044,  991, 1001, 1031,
     1000, 1028, 1019, 1029, 1036, 1035, 1031, 1039, 1040, 1037,
     1048, 1002, 1035, 1042, 1026, 1044, 1038, 1040, 1032, 1041,
     1042, 1047, 1050, 1039,  510, 1054, 1052, 1056, 1048, 1050,
     1047, 1029, 1036, 1052, 1061, 1031, 1055, 1037, 1057, 1058,
     1060, 1041, 1356, 1044, 1038, 1060, 1040, 1064, 1065, 1042,
     1054, 1039, 1056, 1065, 1064, 1067, 1048, 1068, 1055, 1047,
     1061, 1058, 1052, 1057, 1069, 1066, 1071,  507, 1422, 1041,
     1066, 1356, 1074, 1068, 1060, 1071,  502, 1069, 1054, 1074,
     1056, 1260, 1065, 1073, 1067, 1073, 1055, 1260, 1061, 1058,

     1073, 1057, 1075, 1075, 1075, 1075, 1076, 1422, 1081, 1066,
     1075, 1068,  499, 1076, 1071, 1081, 1069, 1077, 1077, 1077,
     1083, 1078, 1067, 1078,  482, 1077, 1260, 1083, 1078, 1079,
     1079, 1079, 1079, 1082, 1082, 1082, 1082, 1079, 1084, 1084,
     1084, 1082, 1086, 1086, 1086,  474, 1084, 1088, 1088, 1088,
     1086, 1087, 1087, 1087, 1087, 1088, 1090, 1090, 1090, 1087,
     1089, 1089, 1089, 1089, 1090, 1091, 1092, 1091, 1089, 1214,
     1216, 1094, 1091, 1092, 1093, 1093, 1093, 1093, 1094, 1095,
     1095, 1095, 1093, 1096,  471, 1096,  459, 1095, 1099, 1101,
     1096, 1097, 1097, 1097, 1097, 1099, 1101, 1214, 1216, 1097,

     1100, 1100, 1100, 1100, 1102, 1102, 1102,  454, 1100, 1104,
     1104, 1104, 1102, 1105, 1105, 1105, 1105, 1104, 1106, 1106,
     1106, 1105, 1107, 1107, 1107, 1107, 1106, 1108, 1108, 1108,
     1107, 1109,  422, 1109,  379, 1108, 1112, 1117, 1109, 1111,
     1111, 1111,  374, 1112, 1117, 1120, 1111, 1113, 1113, 1113,
     1113, 1114, 1120, 1114,  373, 1113,  369, 1122, 1114, 1115,
     1115, 1115, 1115, 1116, 1122, 1116, 1234, 1115,  365, 1127,
     1116, 1118, 1118, 1118, 1118, 1119, 1127, 1119,  357, 1118,
      354,  338, 1119, 1121, 1121, 1121, 1121, 1123, 1123, 1123,
     1124, 1121, 1124,  337, 1234, 1123, 1237, 1124, 1125, 1125,

     1125, 1125, 1128, 1128, 1128, 1128, 1125, 1129, 1130, 1129,
     1128,  333,  329, 1237, 1129, 1130, 1131, 1131, 1131, 1131,
     1132, 1132, 1132, 1132, 1131, 1133, 1135,  325, 1132, 1134,
     1134, 1134, 1133, 1135, 1136, 1136, 1136, 1134, 1138, 1138,
     1138, 1237, 1136,  311,  246,  237, 1138, 1139, 1139, 1139,
     1139, 1140, 1140, 1140, 1140, 1139, 1141, 1141, 1141, 1140,
     1142, 1142, 1142, 1142, 1141, 1143, 1143, 1143, 1142, 1144,
     1144, 1144, 1145, 1143, 1145, 1146, 1226, 1144,  220, 1145,
     1148, 1226, 1146, 1147, 1147, 1147, 1147, 1148, 1149, 1149,
     1149, 1147, 1150, 1150, 1150, 1150, 1149, 1151, 1151, 1151,

     1150, 1152, 1152, 1152, 1152, 1151, 1153, 1154, 1153, 1152,
     1226, 1369, 1156, 1153, 1154, 1155, 1155, 1155, 1155, 1156,
     1157, 1157, 1157, 1155, 1158,  215, 1158,  197, 1157, 1161,
     1163, 1158, 1159, 1159, 1159, 1159, 1161, 1163,  194, 1369,
     1159, 1162, 1162, 1162, 1162, 1164, 1164, 1164,  185, 1162,
     1166, 1166, 1166, 1164, 1167, 1167, 1167, 1167, 1166, 1168,
     1168, 1168, 1167, 1169, 1169, 1169, 1169, 1168, 1170, 1170,
     1170, 1169,  171,  149,  147,  119, 1170, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1223,  115, 1171, 1171, 1171, 1171, 1171,

     1172, 1173, 1172, 1173, 1174,  112, 1223, 1172, 1173, 1176,
       94, 1174, 1175, 1175, 1175, 1175, 1176, 1178, 1259, 1178,
     1175, 1177, 1177, 1177, 1178, 1171, 1171, 1171, 1171, 1177,
     1179, 1179, 1179, 1179, 1181, 1223, 1239, 1259, 1179, 1183,
       53, 1181, 1182, 1182, 1182, 1182, 1183, 1184, 1184, 1184,
     1182,   47, 1239, 1171,   44, 1184, 1186, 1186, 1186, 1187,
     1187, 1187, 1187,   43, 1186, 1259,   40, 1187, 1188, 1188,
     1188, 1189, 1189, 1189, 1189, 1190, 1188, 1190, 1191, 1189,
     1239, 1426, 1190, 1193,   39, 1191, 1192, 1192, 1192, 1192,
     1193, 1194, 1194, 1194, 1192, 1195, 1266, 1195,   34, 1194,

     1198, 1200, 1195, 1196, 1196, 1196, 1196, 1198, 1200, 1229,
     1426, 1196, 1199, 1199, 1199, 1199, 1201, 1201, 1201, 1266,
     1199, 1203, 1203, 1203, 1201, 1205, 1205, 1205, 1205, 1203,
     1207, 1229, 1207, 1205, 1208,   33, 1208, 1207, 1209,   32,
     1209, 1208, 1210,   31, 1210, 1209, 1212, 1266, 1212, 1210,
     1211, 1227, 1211, 1212, 1213, 1207, 1213, 1211, 1217, 1229,
     1217, 1213, 1218, 1219, 1218, 1219, 1221, 1222, 1221, 1222,
     1434, 1212, 1228, 1208, 1224,   29, 1227, 1228, 1225, 1466,
     1236, 1210, 1241, 1224, 1207, 1211, 1213, 1225, 1217, 1218,
     1219, 1230, 1222,   27, 1238, 1241, 1230, 1242,   23, 1434,

     1212, 1208, 1236, 1238, 1227, 1242, 1228, 1466, 1221, 1210,
     1245, 1240, 1224, 1211, 1213, 1243, 1225, 1217, 1218, 1219,
     1240, 1222, 1243, 1247, 1241, 1230, 1245, 1246, 1248, 1251,
     1236, 1249, 1238, 1247, 1242, 1253, 1221, 1248, 1250, 1249,
     1246, 1258, 1252, 1250, 1268, 1261, 1257, 1262, 1263, 1240,
     1252, 1243, 1264, 1251, 1245, 1257, 1262, 1267, 1270, 1258,
     1253, 1264, 1247, 1289, 1268, 1271, 1248, 1261, 1249, 1246,
     1289, 1269, 1250, 1263, 1471, 1267, 1270,   22, 1365, 1252,
     1269, 1251, 1478, 1271, 1257, 1262, 1295, 1258, 1253, 1292,
     1264, 1292, 1268, 1295, 1365, 1261, 1292, 1273, 1273, 1273,

     1273, 1263, 1471, 1267, 1270, 1273, 1275, 1275, 1275, 1269,
     1478, 1271,   21,    6, 1275, 1277, 1277, 1277, 1277, 1279,
     1279, 1279, 1365, 1277, 1283, 1283, 1283, 1279, 1281, 1281,
     1281, 1281, 1283, 1287, 1287, 1287, 1281, 1285, 1285, 1285,
     1285, 1287, 1291, 1291, 1291, 1285, 1293, 1293, 1293, 1293,
     1291,    0,    0,    0, 1293, 1296, 1296, 1296, 1296, 1297,
     1298, 1297, 1298, 1296, 1300, 1301, 1297, 1298, 1299,    0,
     1299, 1300, 1301,    0, 1303, 1299, 1303, 1304, 1304, 1304,
     1304, 1303, 1306,    0,    0, 1304,    0,    0,    0, 1306,
     1307, 1307, 1307, 1307, 1308, 1308, 1308, 1308, 1307, 1310,

     1310, 1310, 1308, 1312, 1312, 1312, 1312, 1310, 1316, 1316,
     1316, 1312, 1314, 1314, 1314, 1314, 1316, 1318, 1318, 1318,
     1314, 1320, 1320, 1320, 1320, 1318, 1322, 1322, 1322, 1320,
     1324, 1324, 1324, 1324, 1322, 1326, 1326, 1326, 1324, 1328,
     1328, 1328, 1328, 1326, 1330, 1330, 1330, 1328, 1332, 1332,
     1332, 1332, 1330, 1334, 1334, 1334, 1332, 1336, 1336, 1336,
     1336, 1334, 1338, 1338, 1338, 1336, 1340, 1340, 1340, 1340,
     1338, 1342, 1342, 1342, 1340, 1344, 1344, 1344, 1344, 1342,
     1346, 1346, 1346, 1344, 1348, 1349, 1348, 1349, 1346,    0,
        0, 1348, 1349, 1350, 1351, 1350, 1351, 1352, 1368, 1352,

     1350, 1351, 1361,    0, 1352, 1348, 1353, 1355, 1353, 1355,
     1357, 1355, 1357, 1353, 1349, 1359, 1360, 1359, 1360, 1363,
     1361, 1370, 1366, 1368, 1371, 1355, 1363, 1375, 1376, 1372,
     1370, 1379, 1375, 1376, 1348, 1351, 1372, 1357, 1383, 1366,
     1359, 1377, 1360, 1349, 1371, 1382, 1377, 1380, 1361, 1385,
     1379, 1368, 1380, 1386,    0, 1383, 1391, 1388,    0, 1370,
     1390, 1375, 1376, 1351, 1388, 1372, 1357, 1366, 1393, 1359,
     1382, 1360, 1371, 1389, 1385, 1377, 1387, 1386, 1379, 1391,
     1389, 1380, 1390, 1383, 1393, 1387, 1387, 1387, 1395, 1396,
     1397, 1399, 1400, 1388, 1401,    0, 1406, 1395, 1382, 1397,

     1399, 1401, 1385, 1406, 1396, 1386,    0, 1391,    0, 1389,
     1390,    0, 1393, 1402, 1402, 1402, 1400, 1404, 1404, 1404,
     1411, 1402, 1408, 1408, 1408, 1404, 1395, 1411, 1397, 1399,
     1408, 1429, 1396, 1409, 1409, 1409, 1409, 1417, 1417, 1417,
     1417, 1409,    0, 1431, 1400, 1417, 1419, 1420, 1419, 1420,
     1421, 1435, 1421, 1419, 1420, 1429, 1423, 1421, 1423, 1427,
     1423, 1427, 1428, 1437, 1428, 1433, 1428, 1431, 1436, 1435,
     1438, 1428, 1439,    0, 1423, 1440, 1437, 1445, 1449, 1419,
     1441, 1433, 1420, 1429, 1436, 1427, 1443, 1446,    0, 1421,
     1452, 1440, 1442, 1445, 1438, 1431, 1439, 1435, 1441, 1442,

     1446, 1451, 1449, 1452, 1450, 1437, 1475, 1419, 1443, 1433,
     1420, 1453, 1436, 1450, 1427, 1475, 1463, 1421, 1463, 1440,
     1451, 1445, 1438, 1463, 1439, 1491, 1441,    0, 1442, 1446,
     1449,    0, 1452, 1491,    0, 1453, 1443, 1459, 1459, 1459,
        0, 1483, 1450, 1477, 1475, 1459, 1483,    0, 1451, 1461,
     1461, 1461, 1464, 1465, 1464, 1465, 1479, 1461,    0, 1464,
     1465, 1481, 1491, 1453, 1468, 1468, 1468, 1477, 1468, 1470,
     1470, 1470, 1472, 1480, 1472, 1483, 1472, 1490, 1482, 1486,
     1479, 1472, 1480, 1487, 1481, 1488, 1464, 1482, 1486, 1470,
     1490, 1489, 1487, 1492, 1488, 1477, 1493, 1495, 1504, 1495,

     1506, 1497, 1497, 1497, 1495, 1497, 1508, 1518, 1479, 1489,
     1517, 1480, 1481, 1516, 1464, 1520, 1482, 1486, 1492, 1490,
     1504, 1487, 1493, 1488, 1499, 1499, 1499, 1509, 1506, 1515,
     1519, 1518, 1516, 1521, 1508, 1517,    0, 1489, 1515, 1519,
     1509,    0,    0, 1520, 1499,    0, 1492, 1527, 1504, 1530,
     1493, 1522, 1522, 1522, 1524, 1522, 1523, 1523, 1523, 1518,
     1516, 1521, 1508, 1517, 1524, 1523, 1527, 1515, 1519, 1509,
     1529, 1530, 1531, 1535, 1535, 1535, 1539, 1535, 1537, 1537,
     1537, 1539, 1540, 1542, 1543, 1531, 1549, 1537, 1529, 1544,
     1545, 1546, 1542, 1524, 1527, 1549, 1550, 1551, 1546, 1530,

     1540,    0, 1543, 1552, 1550, 1551, 1554, 1556,    0,    0,
     1539,    0, 1552,    0, 1531,    0, 1529, 1544, 1545,    0,
        0, 1542,    0,    0, 1549, 1550, 1551, 1546, 1540,    0,
     1543,    0, 1550, 1551,    0, 1554, 1556,    0,    0,    0,
        0, 1552, 1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562,
     1562, 1562, 1562, 1562, 1563, 1563, 1563, 1563, 1563, 1563,
     1563, 1563, 1563, 1563, 1563, 1563, 1564, 1564, 1564, 1564,
     1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564, 1565, 1565,
     1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565,
     1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566,

     1566, 1566, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1568, 1568, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1569, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1570, 1570,
     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1573, 1573, 1573, 1573, 1573, 1573,
     1573, 1573, 1573, 1573, 1573, 1573, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1575, 1575,

     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1576, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577,
     1577, 1577, 1577, 1577, 1578, 1578, 1578, 1578, 1578, 1578,
     1578, 1578, 1578, 1578, 1578, 1578, 1579, 1579, 1579, 1579,
     1579, 1579, 1579, 1579, 1579, 1579, 1579, 1579, 1580, 1580,
     1581, 1581,    0,    0, 1581, 1581, 1582, 1582,    0, 1582,
     1582, 1582, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1585, 1585, 1585, 1585,

     1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587,
     1587, 1587, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1589, 1589, 1589, 1589, 1589, 1589,
     1589, 1589, 1589, 1589, 1589, 1589, 1590, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 1590, 1590,    0, 1590, 1591,    0,
        0,    0,    0, 1591, 1592, 1592, 1592, 1592, 1592, 1592,
     1592, 1592,    0, 1592, 1592, 1592, 1593, 1593,    0,    0,
     1593, 1594, 1594,    0,    0, 1594, 1595, 1595,    0, 1595,

     1595, 1596, 1596,    0, 1596, 1596, 1597, 1597, 1597, 1597,
     1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597, 1598, 1598,
     1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598,
     1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599,
     1599, 1599, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1601, 1601, 1601, 1601, 1601, 1601,
     1601, 1601, 1601, 1601, 1601, 1601, 1602, 1602, 1602, 1602,
     1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,

     1604, 1604, 1605, 1605, 1605, 1605, 1605, 1605, 1605, 1605,
     1605, 1605, 1605, 1605, 1606, 1606, 1606, 1606, 1606, 1606,
     1606, 1606, 1606, 1606, 1606, 1606, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
     1610, 1610, 1610, 1610, 1611, 1611, 1611, 1611, 1611, 1611,
     1611, 1611, 1611, 1611, 1611, 1611, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1613, 1613,

     1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1615, 1615, 1615, 1615, 1615, 1615, 1615, 1615,
     1615, 1615, 1615, 1615, 1616, 1616, 1616, 1616, 1616, 1616,
     1616, 1616, 1616, 1616,    0, 1616, 1617, 1617, 1617, 1617,
     1617, 1617,    0, 1617, 1617, 1617, 1617, 1617, 1618,    0,
        0,    0,    0, 1618, 1619, 1619, 1620, 1620, 1620, 1620,
     1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620, 1621, 1621,
     1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621,
     1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622,

     1622, 1622, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
     1623, 1623, 1623, 1623, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1625, 1625, 1625, 1625,
     1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625, 1626, 1626,
     1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
     1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627,
     1627, 1627, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628,
     1628, 1628, 1628, 1628, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1630, 1630, 1630, 1630,
     1630, 1630, 1630, 1630, 1630, 1630, 1630, 1630, 1631, 1631,

     1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631,
     1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632,
     1632, 1632, 1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633,
     1633, 1633, 1633, 1633, 1634, 1634, 1634, 1634, 1634, 1634,
     1634, 1634, 1634, 1634, 1634, 1634, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1636, 1636,
     1636, 1636, 1636, 1636, 1636, 1636, 1636, 1636, 1636, 1636,
     1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637,
     1637, 1637, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1639, 1639, 1639, 1639, 1639, 1639,

     1639, 1639, 1639, 1639, 1639, 1639, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1641, 1641,
     1641, 1641, 1641, 1641, 1641, 1641, 1641, 1641, 1641, 1641,
     1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642,
     1642, 1642, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1644, 1644, 1644, 1644, 1644, 1644,
     1644, 1644, 1644, 1644, 1644, 1644, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1646, 1646,
     1646, 1646, 1646, 1646,    0, 1646, 1646, 1646, 1646, 1646,
     1647,    0,    0,    0,    0, 1647,    0, 1647, 1648, 1648,

     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650,
     1650, 1650, 1650, 1650, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1652, 1652, 1652, 1652,
     1652, 1652, 1652, 1652, 1652, 1652, 1652, 1652, 1653, 1653,
     1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1655, 1655, 1655, 1655, 1655, 1655, 1655, 1655,
     1655, 1655, 1655, 1655, 1656, 1656, 1656, 1656, 1656, 1656,
     1656, 1656, 1656, 1656, 1656, 1656, 1657, 1657, 1657, 1657,

     1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657, 1658, 1658,
     1658, 1658, 1658, 1658, 1658, 1658, 1658, 1658, 1658, 1658,
     1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659,
     1659, 1659, 1660, 1660, 1660, 1660, 1660, 1660, 1660, 1660,
     1660, 1660, 1660, 1660, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1662, 1662, 1662, 1662,
     1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1663, 1663,
     1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665,

     1665, 1665, 1665, 1665, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1668, 1668,
     1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668,
     1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669,
     1669, 1669, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670,
     1670, 1670, 1670, 1670, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,

     1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674,
     1674, 1674, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675,
     1675, 1675, 1675, 1675, 1676, 1676, 1676, 1676, 1676, 1676,
     1676, 1676, 1676, 1676, 1676, 1676, 1677, 1677, 1677, 1677,
     1677, 1677, 1677, 1677, 1677, 1677, 1677, 1677, 1678, 1678,
     1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678,
     1679, 1679, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680,
     1680, 1680, 1680, 1680, 1681, 1681, 1681, 1681, 1681, 1681,
     1681, 1681, 1681, 1681, 1681, 1681, 1682, 1682, 1682, 1682,
     1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1683, 1683,

     1683, 1683, 1683, 1683, 1683, 1683, 1683, 1683, 1683, 1683,
     1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684,
     1684, 1684, 1685, 1685, 1685, 1685, 1685, 1685, 1685, 1685,
     1685, 1685, 1685, 1685, 1686, 1686, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1686, 1686, 1686, 1687, 1687, 1687, 1687,
     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1688, 1688,
     1688, 1688, 1688, 1688, 1688, 1688, 1688, 1688, 1688, 1688,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
     1690, 1690, 1690, 1690, 1691, 1691, 1691, 1691, 1691, 1691,

     1691, 1691, 1691, 1691, 1691, 1691, 1692, 1692, 1692, 1692,
     1692, 1692, 1692, 1692, 1692, 1692, 1692, 1692, 1693, 1693,
     1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693,
     1694, 1694, 1694, 1694, 1694, 1694, 1694, 1694, 1694, 1694,
     1694, 1694, 1695, 1695, 1695, 1695, 1695, 1695, 1695, 1695,
     1695, 1695, 1695, 1695, 1696, 1696, 1696, 1696, 1696, 1696,
     1696, 1696, 1696, 1696, 1696, 1696, 1697, 1697, 1697, 1697,
     1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1698, 1698,
     1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698,
     1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699,

     1699, 1699, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700,
     1700, 1700, 1700, 1700, 1701, 1701, 1701, 1701, 1701, 1701,
     1701, 1701, 1701, 1701, 1701, 1701, 1702, 1702, 1702, 1702,
     1702, 1702, 1702, 1702, 1702, 1702, 1702, 1702, 1703, 1703,
     1703, 1703, 1703, 1703, 1703, 1703, 1703, 1703, 1703, 1703,
     1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704,
     1704, 1704, 1705, 1705, 1705, 1705, 1705, 1705, 1705, 1705,
     1705, 1705, 1705, 1705, 1706, 1706, 1706, 1706, 1706, 1706,
     1706, 1706, 1706, 1706, 1706, 1706, 1707, 1707, 1707, 1707,
     1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1708, 1708,

     1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708,
     1709, 1709, 1709, 1709, 1709, 1709, 1709, 1709, 1709, 1709,
     1709, 1709, 1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710,
     1710, 1710, 1710, 1710, 1711, 1711, 1711, 1711, 1711, 1711,
     1711, 1711, 1711, 1711, 1711, 1712, 1712, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1714,
     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
     1714, 1715, 1715, 1715, 1715, 1715, 1715, 1715, 1715, 1715,
     1715, 1715, 1715, 1716, 1716, 1716, 1716, 1716, 1716, 1716,
     1716, 1716, 1716, 1716, 1716, 1717, 1717, 1717, 1717, 1717,

     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1718, 1718, 1718,
     1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1719,
     1719, 1719, 1719, 1719, 1719, 1719, 1719, 1719, 1719, 1719,
     1719, 1720, 1720, 1720, 1720, 1720, 1720, 1720, 1720, 1720,
     1720, 1720, 1720, 1721, 1721, 1721, 1721, 1721, 1721, 1721,
     1721, 1721, 1721, 1721, 1721, 1722, 1722, 1722, 1722, 1722,
     1722, 1722, 1722, 1722, 1722, 1722, 1722, 1723, 1723, 1723,
     1723, 1723, 1723, 1723, 1723, 1723, 1723, 1723, 1723, 1724,
     1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724,
     1724, 1725, 1725, 1725, 1725, 1725, 1725, 1725, 1725, 1725,

     1725, 1725, 1725, 1726, 1726, 1726, 1726, 1726, 1726, 1726,
     1726, 1726, 1726, 1726, 1726, 1727, 1727, 1727, 1727, 1727,
     1727, 1727, 1727, 1727, 1727, 1727, 1727, 1728, 1728, 1728,
     1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728, 1729,
     1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729,
     1729, 1730, 1730, 1730, 1730, 1730, 1730, 1730, 1730, 1730,
     1730, 1730, 1730, 1731, 1731, 1731, 1731, 1731, 1731, 1731,
     1731, 1731, 1731, 1731, 1731, 1732, 1732, 1732, 1732, 1732,
     1732, 1732, 1732, 1732, 1732, 1732, 1732, 1733, 1733, 1733,
     1733, 1733, 1733, 1733, 1733, 1733, 1733, 1733, 1733, 1734,

     1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734,
     1734, 1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735,
     1735, 1735, 1735, 1736, 1736, 1736, 1736, 1736, 1736, 1736,
     1736, 1736, 1736, 1736, 1736, 1737, 1737, 1737, 1737, 1737,
     1737, 1737, 1737, 1737, 1737, 1737, 1737, 1738, 1738, 1738,
     1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1739,
     1739, 1739, 1739, 1739, 1739, 1739, 1739, 1739, 1739, 1739,
     1739, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1741, 1741, 1741, 1741, 1741, 1741, 1741,
     1741, 1741, 1741, 1741, 1741, 1742, 1742, 1742, 1742, 1742,

     1742, 1742, 1742, 1742, 1742, 1742, 1742, 1743, 1743, 1743,
     1743, 1743, 1743, 1743, 1743, 1743, 1743, 1743, 1743, 1744,
     1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744,
     1744, 1745, 1745, 1745, 1745, 1745, 1745, 1745, 1745, 1745,
     1745, 1745, 1745, 1746, 1746, 1746, 1746, 1746, 1746, 1746,
     1746, 1746, 1746, 1746, 1746, 1747, 1747, 1748, 1748, 1748,
     1748, 1748, 1748, 1748, 1748, 1748, 1748, 1748, 1748, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1750, 1750, 1750, 1750, 1750, 1750, 1750, 1750, 1750,
     1750, 1750, 1750, 1751, 1751, 1751, 1751, 1751, 1751, 1751,

     1751, 1751, 1751, 1751, 1751, 1752, 1752, 1752, 1752, 1752,
     1752, 1752, 1752, 1752, 1752, 1752, 1752, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1755, 1755, 1755, 1755, 1755, 1755, 1755, 1755, 1755,
     1755, 1755, 1755, 1756, 1756, 1756, 1756, 1756, 1756, 1756,
     1756, 1756, 1756, 1756, 1756, 1757, 1757, 1757, 1757, 1757,
     1757, 1757, 1757, 1757, 1757, 1757, 1757, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1759,
     1759, 1759, 1759, 1759, 1759, 1759, 1759, 1759, 1759, 1759,

     1759, 1760, 1760, 1760, 1760, 1760, 1760, 1760, 1760, 1760,
     1760, 1760, 1760, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1762, 1762, 1762, 1762, 1762,
     1762, 1762, 1762, 1762, 1762, 1762, 1762, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1764,
     1764, 1764, 1764, 1764, 1764, 1764, 1764, 1764, 1764, 1764,
     1764, 1765, 1765, 1765, 1765, 1765, 1765, 1765, 1765, 1765,
     1765, 1765, 1765, 1766, 1766, 1766, 1766, 1766, 1766, 1766,
     1766, 1766, 1766, 1766, 1766, 1767, 1767, 1767, 1767, 1767,
     1767, 1767, 1767, 1767, 1767, 1767, 1767, 1768, 1768, 1768,

     1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768, 1769,
     1769, 1769, 1769, 1769, 1769, 1769, 1769, 1769, 1769, 1769,
     1769, 1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770,
     1770, 1770, 1770, 1771, 1771, 1771, 1771, 1771, 1771, 1771,
     1771, 1771, 1771, 1771, 1771, 1772, 1772, 1772, 1772, 1772,
     1772, 1772, 1772, 1772, 1772, 1772, 1772, 1773, 1773, 1773,
     1773, 1773, 1773, 1773, 1773, 1773, 1773, 1773, 1773, 1774,
     1774, 1774, 1774, 1774, 1774, 1774, 1774, 1774, 1774, 1774,
     1774, 1775, 1775, 1775, 1775, 1775, 1775, 1775, 1775, 1775,
     1775, 1775, 1775, 1776, 1776, 1776, 1776, 1776, 1776, 1776,

     1776, 1776, 1776, 1776, 1776, 1777, 1777, 1777, 1777, 1777,
     1777, 1777, 1777, 1777, 1777, 1777, 1777, 1778, 1778, 1778,
     1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1779,
     1779, 1779, 1779, 1779, 1779, 1779, 1779, 1779, 1779, 1779,
     1779, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780,
     1780, 1780, 1780, 1781, 1781, 1781, 1781, 1781, 1781, 1781,
     1781, 1781, 1781, 1781, 1781, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1783, 1783, 1783,
     1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,

     1784, 1785, 1785, 1786, 1786, 1786, 1786, 1786, 1786, 1786,
     1786, 1786, 1786, 1786, 1786, 1787, 1787, 1787, 1787, 1787,
     1787, 1787, 1787, 1787, 1787, 1787, 1787, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1790, 1790, 1790, 1790, 1790, 1790, 1790, 1790, 1790,
     1790, 1790, 1790, 1791, 1791, 1791, 1791, 1791, 1791, 1791,
     1791, 1791, 1791, 1791, 1791, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1793, 1793, 1793,
     1793, 1793, 1793, 1793, 1793, 1793, 1793, 1793, 1793, 1794,

     1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794,
     1794, 1795, 1795, 1795, 1795, 1795, 1795, 1795, 1795, 1795,
     1795, 1795, 1795, 1796, 1796, 1796, 1796, 1796, 1796, 1796,
     1796, 1796, 1796, 1796, 1796, 1797, 1797, 1797, 1797, 1797,
     1797, 1797, 1797, 1797, 1797, 1797, 1797, 1798, 1798, 1798,
     1798, 1798,    0, 1798, 1798, 1798, 1798, 1798, 1798, 1799,
     1799, 1799, 1799, 1799, 1799, 1799, 1799, 1799, 1799, 1799,
     1799, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800,
     1800, 1800, 1800, 1801, 1801, 1801, 1801, 1801, 1801, 1801,
     1801, 1801, 1801, 1801, 1801, 1802, 1802, 1802, 1802, 1802,

     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1803, 1803, 1803,
     1803, 1803, 1803, 1803, 1803, 1803, 1803, 1803, 1803, 1804,
     1804, 1804, 1804, 1804, 1804, 1804, 1804, 1804, 1804, 1804,
     1804, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1806, 1806, 1806, 1806, 1806, 1806, 1806,
     1806, 1806, 1806, 1806, 1806, 1807, 1807, 1807, 1807, 1807,
     1807, 1807, 1807, 1807, 1807, 1807, 1807, 1808, 1808, 1808,
     1808, 1808, 1808, 1808, 1808, 1808, 1808, 1808, 1808, 1809,
     1809, 1809, 1809, 1809, 1809, 1809, 1809, 1809, 1809, 1809,
     1809, 1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810,

     1810, 1810, 1810, 1811, 1811, 1811, 1811, 1811, 1811, 1811,
     1811, 1811, 1811, 1811, 1811, 1812, 1812, 1812, 1812, 1812,
     1812, 1812, 1812, 1812, 1812, 1812, 1812, 1813, 1813, 1813,
     1813, 1813, 1813, 1813, 1813, 1813, 1813, 1813, 1813, 1814,
     1814, 1815,    0,    0,    0, 1815, 1815, 1816,    0, 1816,
     1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816, 1817,
        0, 1817, 1817, 1817, 1817, 1817, 1817, 1817, 1817, 1817,
     1817, 1818,    0, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1819,    0, 1819, 1819, 1819, 1819, 1819,
     1819, 1819, 1819, 1819, 1819, 1561, 1561, 1561, 1561, 1561,

     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561
    } ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "../src/lexer.l"
/* -copyright-
#-# Copyright: 2015,2016,2017,2018,2019,2020,2021 Willem Vermin wvermin@gmail.com
#-# 
#-# License: BSD-3-Clause
#-#  Redistribution and use in source and binary forms, with or without
#-#  modification, are permitted provided that the following conditions
#-#  are met:
#-#  1. Redistributions of source code must retain the above copyright
#-#     notice, this list of conditions and the following disclaimer.
#-#  2. Redistributions in binary form must reproduce the above copyright
#-#     notice, this list of conditions and the following disclaimer in the
#-#     documentation and/or other materials provided with the distribution.
#-#  3. Neither the name of the copyright holder nor the names of its
#-#     contributors may be used to endorse or promote products derived
#-#     from this software without specific prior written permission.
#-#   
#-#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#-#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#-#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#-#  A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE HOLDERS OR
#-#  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#-#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#-#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
#-#  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#-#  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#-#  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#-#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
#line 31 "../src/lexer.l"
#include <iostream>
#include <deque>
#include <string>

#include "debug.h"
#include "lexer.h"
#include "line_prep.h"
#include "parser.hpp"

#define YY_DECL extern "C" int yylex()

#define YY_USER_ACTION line_pos += yyleng;

std::deque<int> start_stack;
std::string     lexer_name, lexer_stlabel, lexeri_number, lexer_rest, lexer_string, lexer_lr;
int             lexer_lrpos;
std::string     lexer_include;
std::string     input_string;
int             lrlevel;
bool            lrreturn;
Line_prep       pline;
int             line_pos;

#line 2948 "lexer.cpp"
#line 57 "../src/lexer.l"
   /* double [ gives problems in lexer comments */
 




  //  following are keywords starting with c
#line 2957 "lexer.cpp"

#define INITIAL 0
#define state_identifier 1
#define state_keyword 2
#define state_esope 3
#define state_cidentifier 4
#define state_lr 5
#define state_lrb 6
#define state_skip 7
#define state_skipall 8
#define state_skipnoop 9
#define state_error 10
#define state_findformat 11
#define state_scanfixpre 12
#define state_scanompfixed 13
#define state_scanompfree 14
#define state_incfilename 15
#define state_char 16
#define state_labels 17
#define state_iolist 18
#define state_startiolist 19
#define state_calllist 20
#define state_startcalllist 21
#define state_skipnos 22

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 70 "../src/lexer.l"


#line 3208 "lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1562 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 7996 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 72 "../src/lexer.l"
{  D(O("ERROR");Y;); return ERROR; }
	YY_BREAK

case 2:
YY_RULE_SETUP
#line 75 "../src/lexer.l"
{ D(O("lrplus");O(lrlevel);Y;); 
                   lrlevel++;
		   if (lrlevel > 1)
		      lexer_lr += yytext;
		}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 81 "../src/lexer.l"
{ D(O("lrmin");O(lrlevel);Y;); 
                  lrlevel--;
		  if(lrlevel == 0)
		  {
		     D(O("state:");O(start_stack.back());O(lrreturn););
		     BEGIN(start_stack.back());
		     start_stack.pop_back();
		     if(lrreturn)
		     {
			D(O("LR");Y); return LR;
		     }
		  }
		  else
		  {
		      lexer_lr += yytext;
		  }
		}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 99 "../src/lexer.l"
{ D(O("lrbla");O(lrlevel);Y;); 
                    lexer_lr += yytext;
		} 
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 102 "../src/lexer.l"
{ D(O("lreol");O(lrlevel);Y;); yyless(0); BEGIN(start_stack.back()); }
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 107 "../src/lexer.l"
{ D(O("lrb+");O(lrlevel);Y;); 
                  lrlevel++;
		}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 111 "../src/lexer.l"
{ D(O("lrb-");O(lrlevel);Y;); 
                  lrlevel--;
		  if(lrlevel == 0)
		  {
		     D(O("state:");O(start_stack.back());O(lrreturn););
		     BEGIN(start_stack.back());
		     start_stack.pop_back();
		     if(lrreturn)
		     {
			return LRB;
		     }
		  }
		}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 125 "../src/lexer.l"
{ D(O("lrbbla");O(lrlevel);Y;); 
		}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 128 "../src/lexer.l"
{ D(O("lrbeol");O(lrlevel);Y;) 
                  yyless(0);
                  BEGIN(start_stack.back());
		}
	YY_BREAK


case 10:
YY_RULE_SETUP
#line 136 "../src/lexer.l"
{  D(O("skipLPAREN");Y;);
		start_stack.push_back(YY_START);
		lrlevel  = 1;
		lrreturn = 0;
		lexer_lr = "";
		lexer_lrpos = line_pos; 
		BEGIN(state_lr);
	     }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 145 "../src/lexer.l"
{  D(O("skipLPAREN");Y;);
		start_stack.push_back(YY_START);
		lrlevel  = 1;
		lrreturn = 0;
		BEGIN(state_lrb);
	     }
	YY_BREAK

case 12:
YY_RULE_SETUP
#line 153 "../src/lexer.l"
{ D(O("NOSKIP");Y;);     return yytext[yyleng-1]; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 154 "../src/lexer.l"
{ D(O("NOSKIPNOOP");Y;); return yytext[yyleng-1]; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 155 "../src/lexer.l"
{ D(O("NOSKIPNOS");Y;);  return yytext[yyleng-1]; }
	YY_BREAK

case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 158 "../src/lexer.l"
{ D(O("endSKIP");Y;);
               switch(YY_START)
	       {
                  case state_skip:
		     return SKIP;
	          case state_skipall:
		     return SKIPALL;
		  case state_skipnoop:
		     return SKIPNOOP;
		  case state_skipnos:
		     return SKIPNOS;
	       }
	     }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 172 "../src/lexer.l"
{ D(O("SKIP");Y;); }
	YY_BREAK


case 17:
YY_RULE_SETUP
#line 176 "../src/lexer.l"
{ D(O("IDENTIFIER");Y;);  lexer_name = yytext; return IDENTIFIER;  }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 177 "../src/lexer.l"
{ D(O("TIDENTIFIER");Y;); lexer_name = yytext; return TIDENTIFIER; }
	YY_BREAK


case 19:
YY_RULE_SETUP
#line 181 "../src/lexer.l"
{ D(O("IDENTIFIER");Y;);   lexer_name = yytext; return IDENTIFIER;  }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 182 "../src/lexer.l"
{ D(O("TIDENTIFIER");Y;);  lexer_name = yytext; return TIDENTIFIER; }
	YY_BREAK

/* to be used in '#include <file>' */
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 186 "../src/lexer.l"
{ D(O("INCFILENAME");Y;); lexer_string = yytext; 
                             BEGIN state_char; 
			     return INCFILENAME; }
	YY_BREAK


case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 192 "../src/lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 193 "../src/lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK


case 24:
YY_RULE_SETUP
#line 197 "../src/lexer.l"
{ D(O("ABSTRACTINTERFACE");Y;); return ABSTRACTINTERFACE; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 198 "../src/lexer.l"
{ D(O("ASSOCIATE");Y;);         return ASSOCIATE;         }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 199 "../src/lexer.l"
{ D(O("BLOCK");Y;);             return BLOCK;             }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 200 "../src/lexer.l"
{ D(O("BLOCKDATA");Y;);         return BLOCKDATA;         }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 201 "../src/lexer.l"
{ D(O("CASE");Y);               return CASE;              }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 202 "../src/lexer.l"
{ D(O("CASEDEFAULT");Y);        return CASEDEFAULT;       }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 203 "../src/lexer.l"
{ D(O("CHARACTER");Y;);         return BASICTYPE;         }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 204 "../src/lexer.l"
{ D(O("CHANGETEAM");Y);         return CHANGETEAM;        }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 205 "../src/lexer.l"
{ D(O("CLASS");Y;);             return CLASS;             }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 206 "../src/lexer.l"
{ D(O("CLASSDEFAULT");Y);       return CLASSDEFAULT;      }
	YY_BREAK
/* see comment at TYPEIS */
case 34:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 208 "../src/lexer.l"
{ D(O("CLASSIS");Y);            return CLASSIS;           }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 209 "../src/lexer.l"
{ D(O("COMPLEX");Y;);           return BASICTYPE;         }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 210 "../src/lexer.l"
{ D(O("CONTAINS");Y);           return CONTAINS;          }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 211 "../src/lexer.l"
{ D(O("CRITICAL");Y;);          return CRITICAL;          }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 212 "../src/lexer.l"
{ D(O("DO");Y;);                return DO;                }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 213 "../src/lexer.l"
{ D(O("DO,");Y;);               return DOCOMMA;           }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 214 "../src/lexer.l"
{ D(O("DOCONCURRENT");Y;);      return DOCONCURRENT;      }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 215 "../src/lexer.l"
{ D(O("DO,CONCURRENT");Y;);     return DOCONCURRENT;      }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 216 "../src/lexer.l"
{ D(O("DOWHILE");Y;);           return DOWHILE;           }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 217 "../src/lexer.l"
{ D(O("DO,WHILE");Y;);          return DOWHILE;           }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 218 "../src/lexer.l"
{ D(O("DOUBLECOMPLEX");Y;);     return BASICTYPE;         }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 219 "../src/lexer.l"
{ D(O("DOUBLEPRECISION");Y;);   return BASICTYPE;         }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 220 "../src/lexer.l"
{ D(O("ELEMENTAL");Y;);         return ELEMENTAL;         }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 221 "../src/lexer.l"
{ D(O("ELSE");Y);               return ELSE;              }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 222 "../src/lexer.l"
{ D(O("ELSEIF");Y);             return ELSEIF;            }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 223 "../src/lexer.l"
{ D(O("ELSEWHERE");Y);          return ELSEWHERE;         }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 224 "../src/lexer.l"
{ D(O("END");Y;);               return END;               }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 225 "../src/lexer.l"
{ D(O("ENDASSOCIATE");Y;);      return ENDASSOCIATE;      }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 226 "../src/lexer.l"
{ D(O("ENDBLOCK");Y;);          return ENDBLOCK;          }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 227 "../src/lexer.l"
{ D(O("ENDBLOCKDATA");Y;);      return ENDBLOCKDATA;      }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 228 "../src/lexer.l"
{ D(O("ENDCRITICAL");Y;);       return ENDCRITICAL;       }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 229 "../src/lexer.l"
{ D(O("ENDDO");Y;);             return ENDDO;             }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 230 "../src/lexer.l"
{ D(O("ENDENUM");Y;);           return ENDENUM;           }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 231 "../src/lexer.l"
{ D(O("ENDFORALL");Y;);         return ENDFORALL;         }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 232 "../src/lexer.l"
{ D(O("ENDFUNCTION");Y;);       return ENDFUNCTION;       }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 233 "../src/lexer.l"
{ D(O("ENDIF");Y);              return ENDIF;             }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 234 "../src/lexer.l"
{ D(O("ENDINTERFACE");Y;);      return ENDINTERFACE;      }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 235 "../src/lexer.l"
{ D(O("ENDMODULE");Y;);         return ENDMODULE;         }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 236 "../src/lexer.l"
{ D(O("ENDPROCEDURE");Y;);      return ENDPROCEDURE;      }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 237 "../src/lexer.l"
{ D(O("ENDPROGRAM");Y;);        return ENDPROGRAM;        }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 238 "../src/lexer.l"
{ D(O("ENDSELECT");Y);          return ENDSELECT;         }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 239 "../src/lexer.l"
{ D(O("ENDSUBROUTINE");Y;);     return ENDSUBROUTINE;     }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 240 "../src/lexer.l"
{ D(O("ENDSUBMODULE");Y;);      return ENDSUBMODULE;      }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 241 "../src/lexer.l"
{ D(O("ENDTEAM");Y);            return ENDTEAM;           }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 242 "../src/lexer.l"
{ D(O("ENDTYPE");Y;);           return ENDTYPE;           }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 243 "../src/lexer.l"
{ D(O("ENDWHERE");Y;);          return ENDWHERE;          }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 244 "../src/lexer.l"
{ D(O("ENTRY");Y);              return ENTRY;             }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 245 "../src/lexer.l"
{ D(O("ENUM");Y;);              return ENUM;              }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 246 "../src/lexer.l"
{ D(O("FORALL");Y;);            return FORALL;            }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 247 "../src/lexer.l"
{ D(O("FUNCTION");Y;);          return FUNCTION;          }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 248 "../src/lexer.l"
{ D(O("IF");Y;);                return IF;                }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 249 "../src/lexer.l"
{ D(O("IMPURE");Y;);            return IMPURE;            }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 250 "../src/lexer.l"
{ D(O("INCLUDE");Y;);           return INCLUDE;           }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 251 "../src/lexer.l"
{ D(O("INTEGER");Y;);           return BASICTYPE;         }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 252 "../src/lexer.l"
{ D(O("INTERFACE");Y;);         return INTERFACE;         }
	YY_BREAK
case 79:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 253 "../src/lexer.l"
{ D(O("INTERFACE1");Y;);        return INTERFACE1;        }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 254 "../src/lexer.l"
{ D(O("LOGICAL");Y;);           return BASICTYPE;         }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 255 "../src/lexer.l"
{ D(O("MODULE");Y);             return MODULE;            }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 256 "../src/lexer.l"
{ D(O("MODULEPROCEDURE");Y);    return MODULEPROCEDURE;   }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 257 "../src/lexer.l"
{ D(O("MODULESUBROUTINE");Y);   return MODULESUBROUTINE;  }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 258 "../src/lexer.l"
{ D(O("MODULEFUNCTION");Y);     return MODULEFUNCTION;    }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 259 "../src/lexer.l"
{ D(O("PROCEDURE");Y);          return PROCEDURE;         }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 260 "../src/lexer.l"
{ D(O("PROGRAM");Y;);           return PROGRAM;           }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 261 "../src/lexer.l"
{ D(O("PURE");Y;);              return PURE;              }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 262 "../src/lexer.l"
{ D(O("RANK");Y);               return RANK;              }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 263 "../src/lexer.l"
{ D(O("RANKDEFAULT");Y);        return RANKDEFAULT;       }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 264 "../src/lexer.l"
{ D(O("REAL");Y;);              return BASICTYPE;         }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 265 "../src/lexer.l"
{ D(O("RECURSIVE");Y;);         return RECURSIVE;         } 
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 266 "../src/lexer.l"
{ D(O("NON_RECURSIVE");Y;);     return NON_RECURSIVE;     } 
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 267 "../src/lexer.l"
{ D(O("SELECTCASE");Y);         return SELECTCASE;        }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 268 "../src/lexer.l"
{ D(O("SELECTRANK");Y);         return SELECTRANK;        }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 269 "../src/lexer.l"
{ D(O("SELECTTYPE");Y);         return SELECTTYPE;        }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 270 "../src/lexer.l"
{ D(O("SUBMODULE");Y;);         return SUBMODULE;         }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 271 "../src/lexer.l"
{ D(O("SUBROUTINE");Y;);        return SUBROUTINE;        }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 272 "../src/lexer.l"
{ D(O("THEN");Y;);              return THEN;              }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 273 "../src/lexer.l"
{ D(O("TYPE");Y;);              return TYPE;              }
	YY_BREAK
case 100:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 274 "../src/lexer.l"
{ D(O("TYPEC");Y;);             return TYPEC;             }
	YY_BREAK
/* To disambiguate between 'TYPE ISMYTYPE' and TYPE IS(MYTYPE), the lexer */
/* recognizes 'TYPEIS(' and returns "TYPEIS" */
/* Note that the '(' stays in the input buffer */
case 101:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 278 "../src/lexer.l"
{ D(O("TYPEIS");Y);             return TYPEIS;            }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 279 "../src/lexer.l"
{ D(O("USE");Y);                return USE;               }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 280 "../src/lexer.l"
{ D(O("WHERE");Y;);             return WHERE;             }
	YY_BREAK
/* following are only used while relabeling */
case 104:
YY_RULE_SETUP
#line 284 "../src/lexer.l"
{ D(O("ASSIGN");Y;);            return ASSIGN;            }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 285 "../src/lexer.l"
{ D(O("CALL");Y;);              return CALL;              }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 286 "../src/lexer.l"
{ D(O("GOTO");Y;);              return GOTO;              }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 287 "../src/lexer.l"
{ D(O("PRINT");Y;);             return PRINT;             }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 288 "../src/lexer.l"
{ D(O("READ");Y;);              return READ;              }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 289 "../src/lexer.l"
{ D(O("REREAD");Y;);            return READ;              }      /* DEC fortran */
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 290 "../src/lexer.l"
{ D(O("TO");Y;);                return TO;                }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 291 "../src/lexer.l"
{ D(O("WRITE");Y;);             return WRITE;             }
	YY_BREAK
case 112:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 292 "../src/lexer.l"
{ D(O("IO");Y;);                return IO;                }
	YY_BREAK
case 113:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 293 "../src/lexer.l"
{ D(O("IO");Y;);                return IO;                }
	YY_BREAK
case 114:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 294 "../src/lexer.l"
{ D(O("IO");Y;);                return IO;                }
	YY_BREAK
case 115:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 295 "../src/lexer.l"
{ D(O("IO");Y;);                return IO;                }
	YY_BREAK
case 116:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 296 "../src/lexer.l"
{ D(O("IO");Y;);                return IO;                }
	YY_BREAK
case 117:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 297 "../src/lexer.l"
{ D(O("IO");Y;);                return IO;                }
	YY_BREAK
case 118:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 298 "../src/lexer.l"
{ D(O("IO");Y;);                return IO;                }
	YY_BREAK
case 119:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 299 "../src/lexer.l"
{ D(O("IO");Y;);                return IO;                }      /* DEC fortran */
	YY_BREAK
case 120:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 300 "../src/lexer.l"
{ D(O("IO");Y;);                return IO;                }
	YY_BREAK
case 121:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 301 "../src/lexer.l"
{ D(O("IO");Y;);                return IO;                }
	YY_BREAK
case 122:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 302 "../src/lexer.l"
{ D(O("IO");Y;);                return IO;                }
	YY_BREAK
case 123:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 303 "../src/lexer.l"
{ D(O("IO");Y;);                return IO;                }      /* DEC fortran */
	YY_BREAK
case 124:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 304 "../src/lexer.l"
{ D(O("IO");Y;);                return IO;                }      /* DEC fortran */
	YY_BREAK
case 125:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 305 "../src/lexer.l"
{ D(O("IO");Y;);                return IO;                }      /* INTEL fortran */
	YY_BREAK
case 126:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 306 "../src/lexer.l"
{ D(O("IO");Y;);                return IO;                }      /* INTEL fortran */
	YY_BREAK
case 127:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 307 "../src/lexer.l"
{ D(O("IO");Y;);                return IO;                }      /* INTEL fortran */
	YY_BREAK
/* ACCEPT and TYPE, followed by a label are dec-extensions, and are disguised 
      as READ and PRINT respectively */
case 128:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 310 "../src/lexer.l"
{ D(O("ACCEPT");Y;);            return READ;              }      /* DEC fortran */
	YY_BREAK
case 129:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 311 "../src/lexer.l"
{ D(O("TYPE0-9");Y);            return PRINT;             }      /* DEC fortran */
	YY_BREAK


case 130:
YY_RULE_SETUP
#line 315 "../src/lexer.l"
{ D(O("SEGMENT");Y;);           return SEGMENT;           }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 316 "../src/lexer.l"
{ D(O("SEGMENT,");Y;);          return SEGMENT;           }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 317 "../src/lexer.l"
{ D(O("ENDSEGMENT");Y;);        return ENDSEGMENT;        }
	YY_BREAK


case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 321 "../src/lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 322 "../src/lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 323 "../src/lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 324 "../src/lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 325 "../src/lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 326 "../src/lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 327 "../src/lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 328 "../src/lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 329 "../src/lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 330 "../src/lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 331 "../src/lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 332 "../src/lexer.l"
{ D(O("FIXED");Y;);    return FIXED;    }
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 333 "../src/lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 334 "../src/lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK


case 147:
#line 339 "../src/lexer.l"
case 148:
/* rule 148 can match eol */
#line 340 "../src/lexer.l"
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 340 "../src/lexer.l"
{ D(O("FIXOMP");Y;);
                                return OMP;
                              }
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 343 "../src/lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 344 "../src/lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK


case 152:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 347 "../src/lexer.l"
case 153:
YY_RULE_SETUP
#line 348 "../src/lexer.l"
{ D(O("OMP");Y;);
				return OMP;
                              }
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 351 "../src/lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 352 "../src/lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK


case 156:
YY_RULE_SETUP
#line 357 "../src/lexer.l"
{  D(O("LABEL");Y;);
			         lexeri_number = yytext;
                                 return LABEL;
                              }
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 361 "../src/lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 362 "../src/lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK


case 159:
YY_RULE_SETUP
#line 366 "../src/lexer.l"
{  D(O("LABEL");Y;);
			         lexeri_number = yytext;
                                 return LABEL;
                              }
	YY_BREAK
case 160:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 370 "../src/lexer.l"
{  D(O("LABELIS");Y);  return LABELIS;    } 
	YY_BREAK
case 161:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 371 "../src/lexer.l"
{  D(O("LABELIS");Y);  return LABELIS;    } 
	YY_BREAK
case 162:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 372 "../src/lexer.l"
{  D(O("LABELIS");Y);  return LABELIS;    } 
	YY_BREAK
case 163:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 373 "../src/lexer.l"
{  D(O("LABELIS");Y);  return LABELIS;    } 
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 374 "../src/lexer.l"
{  D(O("OTHER");Y);    return OTHER;      }  /* e.g: '(a80)' generated by Line_prep() */
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 375 "../src/lexer.l"
{  D(O("OTHER");Y);    return OTHER;      }  /* e.g: read(5#n,x) dec extension */
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 376 "../src/lexer.l"
{  D(O("EOL"););       return EOL;        }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 377 "../src/lexer.l"
{  D(O("COMMA");Y;);   return yytext[0];  }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 378 "../src/lexer.l"
{  D(O("OTHER");Y;);   return OTHER;      }
	YY_BREAK


case 169:
YY_RULE_SETUP
#line 382 "../src/lexer.l"
{  D(O("STARTIO");Y;); 
				  BEGIN(state_iolist); 
                                  line_pos-=strlen(yytext); 
				  yyless(0);
				  return STARTIO; 
			       }
	YY_BREAK


case 170:
/* rule 170 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 391 "../src/lexer.l"
{  D(O("LABEL_CALLLIST");Y;);    /* DEC allows & and $ next to * */
			         lexeri_number = yytext+2;
                                 return LABEL;
                              }
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 396 "../src/lexer.l"
{  D(O("EOL_CALLLIST"););       return EOL;        }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 397 "../src/lexer.l"
{  D(O("OTHER_CALLLIST");Y;);   return OTHER;      }
	YY_BREAK


case 173:
YY_RULE_SETUP
#line 401 "../src/lexer.l"
{  D(O("STARTCALL");Y;); 
				  BEGIN(state_calllist); 
                                  line_pos-=strlen(yytext); 
				  yyless(0);
				  return STARTCALL; 
			       }
	YY_BREAK


case 174:
YY_RULE_SETUP
#line 410 "../src/lexer.l"
{ D(O("FINDENTFIX P-ON");Y;); 
				return P_ON;
		              }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 413 "../src/lexer.l"
{ D(O("FIXFINDENTFIX P-ON");Y;);
				return P_ON;
		              }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 416 "../src/lexer.l"
{ D(O("FINDENTFIX P-OFF");Y;); 
				return P_OFF;
		              }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 419 "../src/lexer.l"
{ D(O("FIXFINDENTFIX P-OFF");Y;);
				return P_OFF;
		              }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 422 "../src/lexer.l"
{ D(O("FINDENTFIX");Y;); 
                                size_t l = input_string.length()-yyleng-1;
                                lexer_rest = input_string.substr(yyleng,l);
				return FINDENTFIX;
		              }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 427 "../src/lexer.l"
{ D(O("FIXFINDENTFIX");Y;);
                                size_t l = input_string.length()-yyleng-1;
                                lexer_rest = input_string.substr(yyleng,l);
				return FIXFINDENTFIX;
		              }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 432 "../src/lexer.l"
{ D(O("CPP");Y;);
                                return CPP;
                              }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 435 "../src/lexer.l"
{ D(O("CPP_IF");Y;);
                                return CPP_IF;
			      }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 438 "../src/lexer.l"
{ D(O("CPP_ENDIF");Y;);
                                return CPP_ENDIF;
			      }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 441 "../src/lexer.l"
{ D(O("CPP_ELSE");Y;);
                                return CPP_ELSE;
			      }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 444 "../src/lexer.l"
{ D(O("CPP_ELIF");Y;);
                                return CPP_ELIF;
			      }
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 447 "../src/lexer.l"
{ D(O("INCLUDE_CPP");Y;);
                                extract_include();
                                return INCLUDE_CPP;
		              }
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 451 "../src/lexer.l"
{ D(O("INCLUDE_CPP_STD");Y;);
                                extract_include();
                                return INCLUDE_CPP_STD;
		              }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 457 "../src/lexer.l"
{ D(O("COCO");Y;);
                                return COCO;
                              }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 460 "../src/lexer.l"
{ D(O("COCO_IF");Y;);
                                return COCO_IF;
			      }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 463 "../src/lexer.l"
{ D(O("COCO_ENDIF");Y;);
                                return COCO_ENDIF;
			      }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 466 "../src/lexer.l"
{ D(O("COCO_ELSE");Y;);
                                return COCO_ELSE;
			      }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 469 "../src/lexer.l"
{ D(O("COCO_ELIF");Y;);
                                return COCO_ELIF;
			      }
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 472 "../src/lexer.l"
{ D(O("INCLUDE_COCO");Y;);
                              /* coco statements must start with '??' in column 1.
			         However, for this code that is somewhat inconvenient,
				 so we allow white space before '??' */
                                extract_include();
                                return INCLUDE_COCO;
		              }
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 479 "../src/lexer.l"
{ D(O("INCLUDE_COCO");Y;);
                              /* coco statements must start with '??' in column 1.
			         However, for this code that is somewhat inconvenient,
				 so we allow white space before '??' */
                                extract_include();
                                return INCLUDE_COCO;
		              }
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 488 "../src/lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 489 "../src/lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK

case 196:
YY_RULE_SETUP
#line 492 "../src/lexer.l"
{
		   int type = pline.get_type(std::string(yytext));
                   D(O("found_special");O(type);O(pline.get_type_as_string(std::string(yytext)));Y;);
		   D(O("encoded line");O(pline.get_line_encoded()););
		    if (type == pline.is_string)
		    {
		       lexer_string = pline.get_value(std::string(yytext));
		       D(O("QSTRING");O(lexer_string);Y;);
		       return QSTRING;
		    }
		    if (type == pline.is_stlabel)
		    {
		       lexer_stlabel = pline.get_value(std::string(yytext));
		       D(O("STLABEL");O(lexer_stlabel);Y;);
		       return STLABEL;
		    }
		    if (type == pline.is_dotop)
		    {
		       D(O("DOTOPERATOR"););
		       return DOTOPERATOR;
		    }
		    D(O("This should not happen"););
                }
	YY_BREAK
case 197:
/* rule 197 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 517 "../src/lexer.l"
{  D(O("NAMED_LABEL");Y;);
                            lexer_name = yytext;
			    lexer_name.erase(lexer_name.size()-1);
                            return NAMED_LABEL;
			 }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 523 "../src/lexer.l"
{  D(O("I_NUMBER");Y;);
                            lexer_name = yytext;
			    lexeri_number = yytext;
                            return I_NUMBER;
                         }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 530 "../src/lexer.l"
{  D(O("LPAREN");Y;);
                            start_stack.push_back(YY_START);
			    lrlevel  = 1;
			    lrreturn = 1;
			    lexer_lr = "";
		            lexer_lrpos = line_pos; 
			    BEGIN(state_lr);
			 }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 539 "../src/lexer.l"
{  D(O("LPARENB");Y;);
                            start_stack.push_back(YY_START);
			    lrlevel  = 1;
			    lrreturn = 1;
			    BEGIN(state_lrb);
			 }
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 546 "../src/lexer.l"
{  D(O("BLANK");); return BLANK;      }
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 548 "../src/lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 549 "../src/lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 551 "../src/lexer.l"
ECHO;
	YY_BREAK
#line 4656 "lexer.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(state_identifier):
			case YY_STATE_EOF(state_keyword):
			case YY_STATE_EOF(state_esope):
			case YY_STATE_EOF(state_cidentifier):
			case YY_STATE_EOF(state_lr):
			case YY_STATE_EOF(state_lrb):
			case YY_STATE_EOF(state_skip):
			case YY_STATE_EOF(state_skipall):
			case YY_STATE_EOF(state_skipnoop):
			case YY_STATE_EOF(state_error):
			case YY_STATE_EOF(state_findformat):
			case YY_STATE_EOF(state_scanfixpre):
			case YY_STATE_EOF(state_scanompfixed):
			case YY_STATE_EOF(state_scanompfree):
			case YY_STATE_EOF(state_incfilename):
			case YY_STATE_EOF(state_char):
			case YY_STATE_EOF(state_labels):
			case YY_STATE_EOF(state_iolist):
			case YY_STATE_EOF(state_startiolist):
			case YY_STATE_EOF(state_calllist):
			case YY_STATE_EOF(state_startcalllist):
			case YY_STATE_EOF(state_skipnos):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1562 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    
	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1562 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1561);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 551 "../src/lexer.l"


void lexer_set(Line_prep p, const int state)
{
   input_string  = p.get_line_encoded()+'\n';
   D(O("lexer_set");O(input_string);O(p.get_type_as_string(0)););
   pline         = p;
   yy_delete_buffer(YY_CURRENT_BUFFER);
   BEGIN(INITIAL);
   yy_scan_string(input_string.c_str());
   lexer_enable(state);
   line_pos = 0;
}

void lexer_set(const std::string &s, const int state)
{
   input_string  = s+'\n';
   D(O("lexer_set");O(input_string););
   yy_delete_buffer(YY_CURRENT_BUFFER);
   yy_scan_string(input_string.c_str());
   lexer_enable(state);
   line_pos = 0;
}

void lexer_enable(const int k)
{
   switch(k)
   {
      case CALLLIST:      BEGIN(state_startcalllist);   break;  /* prepare for parsing parameters of call to find *100 */
      case CHAR:          BEGIN(state_char);            break;  /* internal use */
      case CIDENTIFIER:   BEGIN(state_cidentifier);     break;  /* parse identifier possibly followed by , */
      case IDENTIFIER:    BEGIN(state_identifier);      break;  /* parse identifier */
      case INCFILENAME:   BEGIN(state_incfilename);     break;  /* parse include file name */
      case LABELS:        BEGIN(state_labels);          break;  /* parse label */
      case SKIPALL:       BEGIN(state_skipall);         break;  /* skip everything */
      case SKIP:          BEGIN(state_skip);            break;  /* skip everything except = */
      case SKIPNOOP:      BEGIN(state_skipnoop);        break;  /* skip everything except [,|~!#$] */
      case KEYWORD:       BEGIN(state_keyword);         break;  /* parse keywords */
      case ESOPE:         BEGIN(state_esope);           break;  /* allow esope keywords */
      case FINDFORMAT:    BEGIN(state_findformat);      break;  /* used to determine fixed or free */
      case IOLIST:        BEGIN(state_startiolist);     break;  /* prepare for parsing parameters of read() etc */
      case SCANFIXPRE:    BEGIN(state_scanfixpre);      break;  /* parse preprocessor and findentfix */
      case SCANOMPFIXED:  BEGIN(state_scanompfixed);    break;  /* parse omp, fixed format */
      case SCANOMPFREE:   BEGIN(state_scanompfree);     break;  /* parse omp, free format */
      case SKIPNOS:       BEGIN(state_skipnos);         break;  /* skip everything except : */
      default:
	 D(O("invalid parameter in lexer_enable");O(k););
	 BEGIN(state_error);
	 break;
   }
   D(O("enabled");O(k);O(YY_START););
}

std::string lexer_getname()
{
   return lexer_name;
}
std::string lexer_getstlabel()
{
   return lexer_stlabel;
}
std::string lexer_geti_number()
{
   return lexeri_number;
}
int lexer_get_pos()
{
   return line_pos;
}
int lexer_get_len()
{
   return yyleng;
}
std::string lexer_getrest()
{
   return lexer_rest;
}
std::string lexer_getstring()
{
   D(O("lexer_string");O(lexer_string););
   return lexer_string;
}
std::string lexer_getlr()
{
   D(O("lexer_lr");O(lexer_lr););
   return lexer_lr;
}
int lexer_getlrpos()
{
   D(O("lexer_lrpos");O(lexer_lrpos););
   return lexer_lrpos;
}

std::string lexer_getinclude()
{
   D(O("lexer_getinclude");O(lexer_include););
   return lexer_include;
}

void extract_include()
{
// removes first and last character of rest of input line
// example: 
// #include "file.inc"
// after scanning of '#include ', the string "file.inc",
// without quotes is put in lexer_include

   size_t l = input_string.length()-yyleng-1;
   lexer_include = input_string.substr(yyleng,l);
   if (lexer_include.size() > 1)
   {
      lexer_include.erase(lexer_include.end()-1);
      lexer_include.erase(lexer_include.begin());
   }
   D(O("lexer_include");O(lexer_include););
}

#if 0
// maybe we need this in the future:
// not sure if this works OK
std::deque<std::string> input_string_stack;
void lexer_push(std::string s, const int state)
{
   // https://sourceforge.net/p/flex/mailman/message/30542280/

   input_string_stack.push_back(s);
   input_string = s+'\n';
   yypush_buffer_state(YY_CURRENT_BUFFER);
   yy_scan_string(input_string.c_str());
   lexer_enable(state);
}
void lexer_pop()
{
   yypop_buffer_state();
   input_string=input_string_stack.back();
   input_string_stack.pop_back();
}
#endif

void quiet_compiler()                   // to prevent warning about unused unput
{
   (void)yyunput;
}


